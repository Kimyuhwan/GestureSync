angular.module('starter.controllers', [])

.controller('overallCtrl', function($scope, $localstorage, $state, $socket) {
    /* 진행상황 확인 페이지 */
    console.log('Start: Overall Ctrl');

    $scope.socket = $socket.getSocket();
    $scope.socket.on('connect',function(){
        console.log('SocketOn: Successfully connected');
    });

})

.controller('gestureCtrl', function($scope, $mdDialog, $localstorage, $state){
    /* 제스처에 대한 설명을 하고 각 제스처를 트레이닝 할 수 있는 화면 */
    console.log('Start: Gesture Ctrl');

    // show dialog
    $scope.showTrainDialog = function(gesture) {
        console.log('Function: showTrainDialog for ' + gesture);

        // gesture_가 붙은 것은 gesture template
        $scope.gesture_name = gesture;

        $mdDialog.show({
          controller: trainController,
          templateUrl: 'templates/_train.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true,
          scope: $scope,
          preserveScope: true
        })
        .then(function(answer) {
          console.log(answer);
        }, function() {
          console.log('cancelled');
        });

    };

    function trainController($scope, $mdDialog, $interval, $cordovaDeviceMotion, $analyzer, $cordovaNativeAudio) {
        /* 제스처를 트레이닝하는 다이얼로그 */
        console.log('Start: Train Controller');

        // variables
        $scope.testing = false;

        // setting information
        var train_information = {
            ship: {train_title: '배모양', train_image_path: 'img/cruise.png', train_subone_title: '왼방향', train_subtwo_title: '오른방향', train_subone_name: 'Left', train_subtwo_name: 'Right', guide_image_path: 'img/ship.gif'},
            hug: {train_title: '포옹', train_image_path: 'img/hug.png', train_subone_title: '앞방향', train_subtwo_title: '뒷방향', train_subone_name: 'Forward', train_subtwo_name: 'Backward', guide_image_path: 'img/hug.gif'},
            fist: {train_title: '다짐', train_image_path: 'img/fist.png', train_subone_title: '윗방향', train_subtwo_title: '아랫방향', train_subone_name: 'Up', train_subtwo_name: 'Down', guide_image_path: 'img/fist.gif'}
        };
        $scope.train_data = train_information[$scope.gesture_name];

        // training functions
        var stop = undefined;

        // set template
        if($scope.gesture_name === 'ship') {
            $scope.subgesture_one_template = [[-0.6068369703475742,-0.026042504840060234,0.794399571601743],[-0.6978317471866703,-0.15193026698203813,0.6999628894399802],[-0.8034888222270327,-0.14380513040208873,0.5776900527326518],[-0.7663456763546797,-0.13054477869100956,0.6290249320090611],[-0.7131226054139602,-0.16445821854621398,0.6814760773499028],[-0.7021110768776593,-0.18168081203645542,0.6884999043307615],[-0.8006373540999006,-0.1412968621516986,0.5822499669093975],[-0.8631827069389153,-0.1760371797758926,0.4732087549677804],[-0.8522889107446966,-0.16653483264809688,0.49585256088527857],[-0.7902285225706821,-0.14763151519068352,0.5947636655330083],[-0.9276333847643,-0.16519995833344922,0.3349705617473794],[-0.9770015011021141,-0.20004389545246914,-0.07382754727347393],[-0.8530812499906828,-0.5140950619777452,-0.0892112558169215],[-0.853081249990683,-0.5140950619777452,-0.08921125581692184],[-0.4401928494454764,-0.27869260579585586,-0.8535576645849933],[0.14764950788253683,0.1406549743716198,-0.978987130153693],[0.2085538154802504,0.17198949285510542,-0.9627694014643763],[0.2266394558609215,-0.20437883004993065,-0.9522939939296514],[0.3347472418715192,-0.09246345827122805,-0.9377605200390638],[0.5815672791118558,-0.02132797163163272,-0.8132186775354543],[0.39805356203351977,0.0921329162386713,-0.9127238834925845],[0.30942520563121767,0.03340271701861081,-0.9503369405720549],[0.11380773174350245,0.1454842214085288,-0.9827930308648679],[-0.1299472470974302,0.3307159287708456,-0.9347409734407904],[-0.19508889953285388,0.41784314683339957,-0.8873259975473625],[-0.5188728085891828,0.5613327060682187,-0.6447298671574818],[-0.7300733889083715,0.5231773878753245,-0.4396342430063859],[-0.8283263121942988,0.523564548684078,-0.19938827419843597],[-0.8551856850577382,0.5024137820466691,-0.1274277665263301]];
            $scope.subgesture_two_template = [[0.9546596674237967,-0.21284703116082745,0.20813711999618764],[0.9546596674237967,-0.21284703116082737,0.2081371199961875],[0.7089696562883249,-0.22789965004984652,0.667400761139491],[0.577486159012473,-0.2708171878346097,0.7701738679820124],[0.46825427168390693,-0.22047104655434865,0.8556462205146496],[0.3706255886433184,-0.2142002983813377,0.9037449337153375],[0.34431234299509367,-0.20570089409114894,0.9160437503915034],[0.2919813442522003,-0.19987562425228408,0.9353056342385829],[0.19899887313279002,-0.1906802441550231,0.9612702497117346],[0.19664640493708466,-0.18971316234417587,0.9619454805022437],[0.23515817958232194,-0.20192910727103533,0.950749844182081],[0.22325660323814628,-0.19025571061111565,0.9560121618946196],[0.11910852568039913,-0.2253510298805098,0.9669695302552378],[-0.235800950260811,-0.30844808216942815,0.9215517850137888],[0.2283315255234926,0.1407644994099562,0.9633535540796945],[0.1371236710160038,0.5010553086370871,-0.8544826952804182],[0.16741028126390317,0.29508498174717523,-0.9406905183291739],[0.27274043488740135,0.30300310269256375,-0.9131274691608565],[0.22478011235865664,0.32146722379672144,-0.9198547304397897],[0.19491113494356999,0.2777839363873172,-0.9406623911692104],[0.17541343789967473,0.21768577516606014,-0.9601265693097804],[0.1599320510769151,0.17316006417533503,-0.9718216560733377],[0.20399714607855648,0.17091304373324084,-0.9639366659037529],[0.23074324003612776,0.1092581515134532,-0.9668610104381568],[0.29814178979871725,0.1856639935712694,-0.9362907425937657],[0.45667516438519373,0.25743199290449864,-0.8515729935025972],[0.533683258114526,0.2400695267130798,-0.8108938292723789],[0.5709459512703886,0.24485636993410465,-0.783623684449777],[0.7433975912460832,0.3306924234667637,-0.5813798606687371],[0.8110065464177658,0.3185989225680866,-0.49067617448372475],[0.7827003087448844,0.2813275753933577,-0.555189176780273]];
        } else if($scope.gesture_name === 'hug') {
            $scope.subgesture_one_template = [[0.3614994289168437,-0.11562319945595666,0.9251753556166332],[0.3614994289168437,-0.11562319945595667,0.9251753556166332],[0.2814234180777454,-0.9429100071343607,0.17810552547104933],[0.2814234180777453,-0.9429100071343605,0.17810552547105005],[-0.15386594166140874,-0.3476691648605602,-0.9249061702690757],[-0.06141576353081328,-0.23546910624637368,-0.9699393816076659],[0.04114212551286626,-0.026009851479544415,-0.9988147041039671],[0.10537358100600606,0.050471769857990983,-0.9931510503812462],[0.08586126358079184,0.1011566033829671,-0.9911585065005147],[0.03406161036459144,0.14629051518876762,-0.988655092469146],[0.03495877668723525,0.19585002978350458,-0.9800105355384361],[0.14922792943562754,0.22886835250498697,-0.9619512993379697],[0.12213904378645896,0.2916397200107564,-0.9486982279391993],[0.17506757483576765,0.3359315034414438,-0.9254735918634817],[0.18163013249975427,0.3996962051950704,-0.8984728368296852],[0.22522131944500715,0.4961125783815316,-0.8385390073449647],[0.47195313699814867,0.582139774920166,-0.6620978167412314],[0.5378090913653463,0.6090246428179815,-0.5829668649976691],[0.5182803139617844,0.5759775873588723,-0.6321671733172538],[0.4644747011462685,0.579074797051797,-0.6700265900802034],[0.38297053694139316,0.538844981890307,-0.7503197007452596],[0.13689551115942117,0.5429775200760261,-0.8285137486586989],[-0.6062494415607816,0.6289640729702333,-0.48668861659169255],[-0.9430359374748509,0.22682648983475875,0.24337823267533856],[-0.7887203537001886,0.03039044917299406,0.6140005083533019],[-0.6980813489244365,-0.03424581601947127,0.7151990312975819],[-0.7526604820445638,0.025811536821635943,0.6579027005077195],[-0.8037379926475021,0.3561985971476775,0.47657926787155824],[-0.5441356553664479,0.8034634677624714,0.24158403202618764],[-0.21445724990059006,0.9638392167129852,0.15818360310466678],[0.24988734441827914,0.7901979827570986,0.559592229347578],[0.33916907920357575,0.5805918478210471,0.7401874370427673]];
            $scope.subgesture_two_template = [[0.8019088147509726,0.2580456701626595,-0.5388456967769106],[0.7636204348737974,0.14235134605659067,-0.6297776795973554],[0.4744608412758748,-0.2470619360300003,-0.844894851363705],[0.0825917746435451,-0.587418137312219,-0.8050580915175456],[-0.2072055620151687,-0.846791852259508,-0.48990755660317137],[-0.4545247720749976,-0.8882466077614747,-0.0665221419559255],[-0.43380558382950396,-0.8901971446947959,0.13914653792163045],[-0.43351876314235505,-0.8889165488590427,0.14794881266185303],[-0.4737121243982762,-0.8706981862769402,0.13221759191619928],[-0.5465317635131263,-0.7947065385332206,0.2640919330153403],[-0.52249502782717,-0.7919693345222668,0.3158852941690111],[-0.5213502066514342,-0.761203466992028,0.385698384575076],[-0.2828206024272194,-0.7833471046152962,0.5535158719797806],[-0.09564667412627587,-0.6229030564946518,0.776429968469921],[-0.20489812124608212,-0.4773793226657421,0.8544739564205706],[-0.23479542130375256,-0.4010597058113059,0.885450293641231],[-0.28298931340964617,-0.20169268637203172,0.9376764414018145],[-0.308949742847334,-0.062427305508880156,0.9490273378156538],[-0.3090282656379004,0.38866666890666196,0.8680090734075483],[-0.3090282656379004,0.3886666689066619,0.8680090734075482],[-0.30902826563790037,0.38866666890666196,0.8680090734075482],[0.36543100149024743,0.9016542463550141,0.23125700676910615],[0.5802789347421251,0.814389432782201,0.006797769283348187],[0.6982816486932206,0.46929096904255835,-0.5405263411466402],[0.5353021708358617,0.05896780173885933,-0.8425997770332606],[0.3907104036508008,-0.10147190539585707,-0.9149037287574919],[0.32656871805121,-0.06129036626932313,-0.9431841619710126],[0.3451131631101148,-0.0006229747354366177,-0.9385608752503006],[0.288889188139446,0.008126835365584024,-0.957328048018584],[0.25174687493677894,0.07232093384829405,-0.965087142949732],[0.5326147727738333,0.22850681831983874,-0.8149270751450232],[0.6249462248145862,0.5669865285793944,-0.5366269584166307],[0.807553963277094,0.19437269452803438,0.5568445492391656]];
        } else if($scope.gesture_name === 'fist') {
            $scope.subgesture_one_template = [[0.3931954656332231,-0.6894349094426494,-0.6083394048122139],[0.4421543443366109,-0.8203402357343829,-0.36268641195875956],[0.3015707785184035,-0.9413774082642385,0.15120727744890203],[0.2616387577142776,-0.9591120543407331,0.10793158796213433],[0.2913952789933124,-0.9158201732607844,0.276337115909167],[0.2913952789933126,-0.9158201732607844,0.27633711590916693],[0.41122908851622636,-0.7580156330902431,0.5062637027764402],[0.45744602928895145,-0.841720000256749,0.2867936042793671],[0.42436185743193716,-0.9009856693809205,0.09023213134538498],[0.3288347995369369,-0.9409570732127893,-0.08042052588937748],[0.2974460304623019,-0.9526419763239945,-0.06323862670657082],[0.19078539845979275,-0.8784843326719075,0.43802535198836545],[0.13683398345831746,-0.7916417556448282,0.595466028997879],[0.19507615628653932,-0.73413850579283,0.6503736983925015],[0.311796363800432,-0.7116421709557034,0.6295621081658919],[0.7239315672979126,-0.310841013853032,0.6158741348493272],[0.904534074386287,0.08576135962252864,0.4176877990435421],[0.7872099057644818,0.5407399980548087,0.296480722425525],[0.7272032213367952,0.5934877507711737,0.3448880464179087],[0.6102149730657696,0.7329061964231376,-0.3008092317248776],[0.3345047838450289,0.5682310854629098,-0.7518111352583396],[0.03829506962732256,0.48829712220081406,-0.8718368012951976],[-0.5096789930217579,0.19024102899255158,-0.8390683374792436],[-0.638285620371274,-0.08228352620950699,-0.7653893702827256],[-0.576352521716996,-0.15462602972791853,-0.802439132670535],[-0.6894195816489029,0.057836552295011494,-0.7220495645436524],[-0.6078932945112059,0.06610525457967889,-0.7912621801939406],[-0.4393909490615608,0.034499867440032396,-0.8976331951467711],[-0.4011899454284438,0.22571552018396782,-0.8877494757166591]];
            $scope.subgesture_two_template = [[0.5016632143414363,-0.35683171276110914,0.7880387986289705],[0.5143110183323178,-0.4525432829004476,0.7284838732076777],[0.4143121426536822,-0.6396146313944675,0.6474863487022985],[0.20060543839287479,-0.7647999781589362,0.6122405176850788],[0.020712307965896414,-0.8553224045316917,0.517681933821194],[-0.05548153361697582,-0.9723095611164896,0.22701523470676513],[-0.8318886879388758,-0.2598046663283034,-0.4903700095166656],[-0.6626649031583332,0.29937332173273157,-0.6864771229668671],[-0.5644889275061177,0.6350628708747854,-0.5273020014747419],[-0.5597059622425012,0.7212159520432299,-0.40813819516013605],[-0.5213870676090696,0.7530338440014036,-0.4013671081671804],[-0.42951505541001667,0.7774736754765836,-0.45940341870415163],[-0.40151036435307697,0.8143840276626778,-0.41900845194933034],[-0.4765613749379,0.8126373356246014,-0.33542483012777563],[-0.442015621354421,0.8674535436749564,-0.22835616927165667],[-0.35522910525971574,0.9095530134937787,-0.2156979332788516],[-0.24149187228049018,0.932912167689308,-0.2671264925081376],[-0.2814136842971468,0.9529088133601962,-0.11300943195489568],[-0.3499127236889651,0.9364910574891185,0.023357761953630856],[-0.3196980513469772,0.9344492116822967,0.1568369431966841],[-0.19871721927702266,0.9393180414835183,0.2796302625009947],[-0.3238790741390571,0.7039138125677367,0.6321453075133757],[-0.5077755168575743,0.5927137477374171,0.6251835232338492],[-0.4620929308115145,0.6752361276011358,0.5749141633985437],[-0.3400262240487626,0.7515170086612928,0.5653356106348892],[-0.134022931818962,0.7196642992563833,0.6812643760849885],[-0.022262150732644963,0.6876660061232391,0.7256857864580719],[-0.31590575259962556,0.692012963773135,0.6490929158790641]];
        }

        // testing functions
        $scope.train_test_start = function() {
            if ( angular.isDefined(stop) ) return;

            $scope.testing = true;
            // initialize raw mode
            $scope.collection_features = [];
            $scope.collection_feature_magnitudes = [];
            $scope.analysis_index = 0;
            $scope.recognition_state = "non";
            $scope.pre_gesturestate = "non";

            $scope.current_state = "Non";

            // get templates from local storage
            var one_template = $scope.subgesture_one_template;
            var two_template = $scope.subgesture_two_template;
            var frame_size = Math.min(one_template.length, two_template.length); // 이거 어떻게 정해야하는지 고민되는 구만
            console.log('A Length of one template : ' + one_template.length);
            console.log('A Length of two template : : ' + two_template.length);

            $scope.left_distance = 0;
            $scope.right_distance = 0;

            // start collecting
            var gravity = [0, 0, 0];
            stop = $interval(function() {
              // get accelerometer data
              $cordovaDeviceMotion.getCurrentAcceleration().then(function (result) {

                    $scope.analysis_index++;

                    // calculate similarity
                    if ($scope.collection_features.length > frame_size) {
                        $scope.collection_features.shift();
                        $scope.collection_feature_magnitudes.shift();

                        // calculate average magnitude
                        var sum = 0;
                        for (var i = $scope.collection_feature_magnitudes.length - 5; i < $scope.collection_feature_magnitudes.length; i++)
                            sum += $scope.collection_feature_magnitudes[i];
                        $scope.avg_magnitude = sum / $scope.collection_feature_magnitudes.length;

                        if ($scope.analysis_index % 2 == 0 && $scope.avg_magnitude > 0.2) {

                            // get similarity
                            if ($scope.pre_gesturestate !== 'One') {
                                // Right or None
                                var left_distance = $analyzer.getSimilarity(one_template, $scope.collection_features);
                                if (left_distance < 17) {
                                    console.log('One Gesture ' + left_distance);
                                    $scope.recognition_state = "One";
                                    $scope.pre_gesturestate = "One";
                                    $cordovaNativeAudio.play('effect_one');
                                }
                            } else if ($scope.pre_gesturestate !== 'Two') {
                                var right_distance = $analyzer.getSimilarity(two_template, $scope.collection_features);
                                if (right_distance < 17) {
                                    console.log('Two Gesture ' + right_distance);
                                    $scope.recognition_state = "Two";
                                    $scope.pre_gesturestate = "Two";
                                    $cordovaNativeAudio.play('effect_two');
                                }
                            }
                        }
                    }

                    // remove gravity
                    var alpha = 0.8;
                    gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
                    gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
                    gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;

                    // normalize and make collection_features
                    var frame_feature = [];
                    var magnitude = Math.sqrt((result.x - gravity[0]) * (result.x - gravity[0]) + (result.y - gravity[1]) * (result.y - gravity[1]) + (result.z - gravity[2]) * (result.z - gravity[2]));
                    frame_feature.push((result.x - gravity[0]) / magnitude);
                    frame_feature.push((result.y - gravity[1]) / magnitude);
                    frame_feature.push((result.z - gravity[2]) / magnitude);
                    $scope.collection_features.push(frame_feature);
                    $scope.collection_feature_magnitudes.push(magnitude);

                }, function (err) {
                });


            }, 25);
        };

        $scope.train_stop = function() {
            // stop collection
            console.log('Function: train_stop');
            if (angular.isDefined(stop)) {
              $scope.testing = false;
              $interval.cancel(stop);
              stop = undefined;
            }
        };

        // dialog functions
        $scope.answer = function(answer) {
            if($scope.testing === false) {
                $mdDialog.hide(answer);
            }
        };

    }

    $scope.ImReady = function() {
        console.log('Function: ImReady');
        $state.go('game');

    };
})


.controller('gameCtrl', function($scope, $cordovaNativeAudio, $interval, $cordovaDeviceMotion, $localstorage, $analyzer, $cordovaVibration, $socket, $template) {
    console.log('Start: Game Controller');

    var my_name = $localstorage.getID();
    $scope.vibration = false;

    // [Socket] Init
    $scope.socket = $socket.getSocket();
    $scope.socket.on('connect',function(){
        console.log('SocketOn: Successfully connected');
    });

    // [Socket] On Start
    $scope.socket.on('Start', function(data) {
        console.log('SocketOn: Start Game at ' + data);
        var start_timer = setInterval(function(){
          var current_timestamp = new Date().getTime();
          if(current_timestamp >= data) {
              clearInterval(start_timer);
              $scope.playGame();
          }
        },10);
    });

    // [Socket] Vibration
    $scope.socket.on('Vibration', function() {
        console.log('SocketOn: Vibration');
        $scope.vibration = true;
    });

    // [Game] Start
    $scope.playGame = function() {
        // start background music
        $cordovaNativeAudio.loop('music');
        $cordovaNativeAudio.setVolumeForComplexAsset('music', 0.1);
        $cordovaNativeAudio.loop('beat');

        //
        $scope.cut_length = 5;
        // get templates from local storage
        var left_template = [[-0.6068369703475742,-0.026042504840060234,0.794399571601743],[-0.6978317471866703,-0.15193026698203813,0.6999628894399802],[-0.8034888222270327,-0.14380513040208873,0.5776900527326518],[-0.7663456763546797,-0.13054477869100956,0.6290249320090611],[-0.7131226054139602,-0.16445821854621398,0.6814760773499028],[-0.7021110768776593,-0.18168081203645542,0.6884999043307615],[-0.8006373540999006,-0.1412968621516986,0.5822499669093975],[-0.8631827069389153,-0.1760371797758926,0.4732087549677804],[-0.8522889107446966,-0.16653483264809688,0.49585256088527857],[-0.7902285225706821,-0.14763151519068352,0.5947636655330083],[-0.9276333847643,-0.16519995833344922,0.3349705617473794],[-0.9770015011021141,-0.20004389545246914,-0.07382754727347393],[-0.8530812499906828,-0.5140950619777452,-0.0892112558169215],[-0.853081249990683,-0.5140950619777452,-0.08921125581692184],[-0.4401928494454764,-0.27869260579585586,-0.8535576645849933],[0.14764950788253683,0.1406549743716198,-0.978987130153693],[0.2085538154802504,0.17198949285510542,-0.9627694014643763],[0.2266394558609215,-0.20437883004993065,-0.9522939939296514],[0.3347472418715192,-0.09246345827122805,-0.9377605200390638],[0.5815672791118558,-0.02132797163163272,-0.8132186775354543],[0.39805356203351977,0.0921329162386713,-0.9127238834925845],[0.30942520563121767,0.03340271701861081,-0.9503369405720549],[0.11380773174350245,0.1454842214085288,-0.9827930308648679],[-0.1299472470974302,0.3307159287708456,-0.9347409734407904],[-0.19508889953285388,0.41784314683339957,-0.8873259975473625],[-0.5188728085891828,0.5613327060682187,-0.6447298671574818],[-0.7300733889083715,0.5231773878753245,-0.4396342430063859],[-0.8283263121942988,0.523564548684078,-0.19938827419843597],[-0.8551856850577382,0.5024137820466691,-0.1274277665263301]];
        var right_template = [[0.9546596674237967,-0.21284703116082745,0.20813711999618764],[0.9546596674237967,-0.21284703116082737,0.2081371199961875],[0.7089696562883249,-0.22789965004984652,0.667400761139491],[0.577486159012473,-0.2708171878346097,0.7701738679820124],[0.46825427168390693,-0.22047104655434865,0.8556462205146496],[0.3706255886433184,-0.2142002983813377,0.9037449337153375],[0.34431234299509367,-0.20570089409114894,0.9160437503915034],[0.2919813442522003,-0.19987562425228408,0.9353056342385829],[0.19899887313279002,-0.1906802441550231,0.9612702497117346],[0.19664640493708466,-0.18971316234417587,0.9619454805022437],[0.23515817958232194,-0.20192910727103533,0.950749844182081],[0.22325660323814628,-0.19025571061111565,0.9560121618946196],[0.11910852568039913,-0.2253510298805098,0.9669695302552378],[-0.235800950260811,-0.30844808216942815,0.9215517850137888],[0.2283315255234926,0.1407644994099562,0.9633535540796945],[0.1371236710160038,0.5010553086370871,-0.8544826952804182],[0.16741028126390317,0.29508498174717523,-0.9406905183291739],[0.27274043488740135,0.30300310269256375,-0.9131274691608565],[0.22478011235865664,0.32146722379672144,-0.9198547304397897],[0.19491113494356999,0.2777839363873172,-0.9406623911692104],[0.17541343789967473,0.21768577516606014,-0.9601265693097804],[0.1599320510769151,0.17316006417533503,-0.9718216560733377],[0.20399714607855648,0.17091304373324084,-0.9639366659037529],[0.23074324003612776,0.1092581515134532,-0.9668610104381568],[0.29814178979871725,0.1856639935712694,-0.9362907425937657],[0.45667516438519373,0.25743199290449864,-0.8515729935025972],[0.533683258114526,0.2400695267130798,-0.8108938292723789],[0.5709459512703886,0.24485636993410465,-0.783623684449777],[0.7433975912460832,0.3306924234667637,-0.5813798606687371],[0.8110065464177658,0.3185989225680866,-0.49067617448372475],[0.7827003087448844,0.2813275753933577,-0.555189176780273]];
        var forward_template = [[0.3614994289168437,-0.11562319945595666,0.9251753556166332],[0.3614994289168437,-0.11562319945595667,0.9251753556166332],[0.2814234180777454,-0.9429100071343607,0.17810552547104933],[0.2814234180777453,-0.9429100071343605,0.17810552547105005],[-0.15386594166140874,-0.3476691648605602,-0.9249061702690757],[-0.06141576353081328,-0.23546910624637368,-0.9699393816076659],[0.04114212551286626,-0.026009851479544415,-0.9988147041039671],[0.10537358100600606,0.050471769857990983,-0.9931510503812462],[0.08586126358079184,0.1011566033829671,-0.9911585065005147],[0.03406161036459144,0.14629051518876762,-0.988655092469146],[0.03495877668723525,0.19585002978350458,-0.9800105355384361],[0.14922792943562754,0.22886835250498697,-0.9619512993379697],[0.12213904378645896,0.2916397200107564,-0.9486982279391993],[0.17506757483576765,0.3359315034414438,-0.9254735918634817],[0.18163013249975427,0.3996962051950704,-0.8984728368296852],[0.22522131944500715,0.4961125783815316,-0.8385390073449647],[0.47195313699814867,0.582139774920166,-0.6620978167412314],[0.5378090913653463,0.6090246428179815,-0.5829668649976691],[0.5182803139617844,0.5759775873588723,-0.6321671733172538],[0.4644747011462685,0.579074797051797,-0.6700265900802034],[0.38297053694139316,0.538844981890307,-0.7503197007452596],[0.13689551115942117,0.5429775200760261,-0.8285137486586989],[-0.6062494415607816,0.6289640729702333,-0.48668861659169255],[-0.9430359374748509,0.22682648983475875,0.24337823267533856],[-0.7887203537001886,0.03039044917299406,0.6140005083533019],[-0.6980813489244365,-0.03424581601947127,0.7151990312975819],[-0.7526604820445638,0.025811536821635943,0.6579027005077195],[-0.8037379926475021,0.3561985971476775,0.47657926787155824],[-0.5441356553664479,0.8034634677624714,0.24158403202618764],[-0.21445724990059006,0.9638392167129852,0.15818360310466678],[0.24988734441827914,0.7901979827570986,0.559592229347578],[0.33916907920357575,0.5805918478210471,0.7401874370427673]];
        var backward_template = [[0.8019088147509726,0.2580456701626595,-0.5388456967769106],[0.7636204348737974,0.14235134605659067,-0.6297776795973554],[0.4744608412758748,-0.2470619360300003,-0.844894851363705],[0.0825917746435451,-0.587418137312219,-0.8050580915175456],[-0.2072055620151687,-0.846791852259508,-0.48990755660317137],[-0.4545247720749976,-0.8882466077614747,-0.0665221419559255],[-0.43380558382950396,-0.8901971446947959,0.13914653792163045],[-0.43351876314235505,-0.8889165488590427,0.14794881266185303],[-0.4737121243982762,-0.8706981862769402,0.13221759191619928],[-0.5465317635131263,-0.7947065385332206,0.2640919330153403],[-0.52249502782717,-0.7919693345222668,0.3158852941690111],[-0.5213502066514342,-0.761203466992028,0.385698384575076],[-0.2828206024272194,-0.7833471046152962,0.5535158719797806],[-0.09564667412627587,-0.6229030564946518,0.776429968469921],[-0.20489812124608212,-0.4773793226657421,0.8544739564205706],[-0.23479542130375256,-0.4010597058113059,0.885450293641231],[-0.28298931340964617,-0.20169268637203172,0.9376764414018145],[-0.308949742847334,-0.062427305508880156,0.9490273378156538],[-0.3090282656379004,0.38866666890666196,0.8680090734075483],[-0.3090282656379004,0.3886666689066619,0.8680090734075482],[-0.30902826563790037,0.38866666890666196,0.8680090734075482],[0.36543100149024743,0.9016542463550141,0.23125700676910615],[0.5802789347421251,0.814389432782201,0.006797769283348187],[0.6982816486932206,0.46929096904255835,-0.5405263411466402],[0.5353021708358617,0.05896780173885933,-0.8425997770332606],[0.3907104036508008,-0.10147190539585707,-0.9149037287574919],[0.32656871805121,-0.06129036626932313,-0.9431841619710126],[0.3451131631101148,-0.0006229747354366177,-0.9385608752503006],[0.288889188139446,0.008126835365584024,-0.957328048018584],[0.25174687493677894,0.07232093384829405,-0.965087142949732],[0.5326147727738333,0.22850681831983874,-0.8149270751450232],[0.6249462248145862,0.5669865285793944,-0.5366269584166307],[0.807553963277094,0.19437269452803438,0.5568445492391656]];
        var up_template = [[0.3931954656332231,-0.6894349094426494,-0.6083394048122139],[0.4421543443366109,-0.8203402357343829,-0.36268641195875956],[0.3015707785184035,-0.9413774082642385,0.15120727744890203],[0.2616387577142776,-0.9591120543407331,0.10793158796213433],[0.2913952789933124,-0.9158201732607844,0.276337115909167],[0.2913952789933126,-0.9158201732607844,0.27633711590916693],[0.41122908851622636,-0.7580156330902431,0.5062637027764402],[0.45744602928895145,-0.841720000256749,0.2867936042793671],[0.42436185743193716,-0.9009856693809205,0.09023213134538498],[0.3288347995369369,-0.9409570732127893,-0.08042052588937748],[0.2974460304623019,-0.9526419763239945,-0.06323862670657082],[0.19078539845979275,-0.8784843326719075,0.43802535198836545],[0.13683398345831746,-0.7916417556448282,0.595466028997879],[0.19507615628653932,-0.73413850579283,0.6503736983925015],[0.311796363800432,-0.7116421709557034,0.6295621081658919],[0.7239315672979126,-0.310841013853032,0.6158741348493272],[0.904534074386287,0.08576135962252864,0.4176877990435421],[0.7872099057644818,0.5407399980548087,0.296480722425525],[0.7272032213367952,0.5934877507711737,0.3448880464179087],[0.6102149730657696,0.7329061964231376,-0.3008092317248776],[0.3345047838450289,0.5682310854629098,-0.7518111352583396],[0.03829506962732256,0.48829712220081406,-0.8718368012951976],[-0.5096789930217579,0.19024102899255158,-0.8390683374792436],[-0.638285620371274,-0.08228352620950699,-0.7653893702827256],[-0.576352521716996,-0.15462602972791853,-0.802439132670535],[-0.6894195816489029,0.057836552295011494,-0.7220495645436524],[-0.6078932945112059,0.06610525457967889,-0.7912621801939406],[-0.4393909490615608,0.034499867440032396,-0.8976331951467711],[-0.4011899454284438,0.22571552018396782,-0.8877494757166591]];
        var down_template = [[0.5016632143414363,-0.35683171276110914,0.7880387986289705],[0.5143110183323178,-0.4525432829004476,0.7284838732076777],[0.4143121426536822,-0.6396146313944675,0.6474863487022985],[0.20060543839287479,-0.7647999781589362,0.6122405176850788],[0.020712307965896414,-0.8553224045316917,0.517681933821194],[-0.05548153361697582,-0.9723095611164896,0.22701523470676513],[-0.8318886879388758,-0.2598046663283034,-0.4903700095166656],[-0.6626649031583332,0.29937332173273157,-0.6864771229668671],[-0.5644889275061177,0.6350628708747854,-0.5273020014747419],[-0.5597059622425012,0.7212159520432299,-0.40813819516013605],[-0.5213870676090696,0.7530338440014036,-0.4013671081671804],[-0.42951505541001667,0.7774736754765836,-0.45940341870415163],[-0.40151036435307697,0.8143840276626778,-0.41900845194933034],[-0.4765613749379,0.8126373356246014,-0.33542483012777563],[-0.442015621354421,0.8674535436749564,-0.22835616927165667],[-0.35522910525971574,0.9095530134937787,-0.2156979332788516],[-0.24149187228049018,0.932912167689308,-0.2671264925081376],[-0.2814136842971468,0.9529088133601962,-0.11300943195489568],[-0.3499127236889651,0.9364910574891185,0.023357761953630856],[-0.3196980513469772,0.9344492116822967,0.1568369431966841],[-0.19871721927702266,0.9393180414835183,0.2796302625009947],[-0.3238790741390571,0.7039138125677367,0.6321453075133757],[-0.5077755168575743,0.5927137477374171,0.6251835232338492],[-0.4620929308115145,0.6752361276011358,0.5749141633985437],[-0.3400262240487626,0.7515170086612928,0.5653356106348892],[-0.134022931818962,0.7196642992563833,0.6812643760849885],[-0.022262150732644963,0.6876660061232391,0.7256857864580719],[-0.31590575259962556,0.692012963773135,0.6490929158790641]];

        // initialize raw mode
        $scope.collection_features = [];
        $scope.collection_feature_magnitudes = [];
        $scope.analysis_index = 0;
        $scope.unrecognized_count = 10;
        $scope.time = 0;
        //state value
        $scope.recognition_state = "non";
        $scope.pre_gesturestate = "non";
        //session
        $scope.session_num = 0;
        $scope.session_image = "img/cruise.png";
        // progress
        $scope.progress_value = 100;
        var music_length = 254;
        // gesture recognition
        $scope.gesture_recog = true;
        // style
        $scope.symbol={width:'120px'};
        // description
        $scope.description_first = "세월호를 배가 물위를 떠다니는 모습을 형상화,";
        $scope.description_second = "핸드폰을 손에 들고 좌우로 움직이는 제스처입니다.";
        // gesture cut out
        $scope.description = true;

        // set one and two template with a initial gesture
        var one_template = left_template;
        var two_template = right_template;
        var frame_size = Math.min(one_template.length, two_template.length);
        console.log('A Length of the first and second template  : ' + one_template.length + ', ' + two_template.length);

        // start collecting
        // 12초 - 70초까지 Session 1, 88초 - 136초 Session 2, 156초 - 210초 Session 3, 210초 - 270 듣기
        var tick = 0;
        var gravity = [0, 0, 0];
        var vibration_info = [400, 660, 900, 1160, 1420, 1680, 1920, 2180, 2440, 3200, 3460, 3720, 3980, 4240, 4480, 4740, 4980, 5240, 6020, 6260, 6520, 6780, 7040, 7280, 7540, 7800];

        $scope.stop = $interval(function() {
            tick = tick + 1;
            if(tick % 20 === 0) {
                var index = vibration_info.indexOf(tick);
                if(index !== -1 && $scope.vibration) {
                    $cordovaVibration.vibrate(3000);
                    $scope.vibration = false;
                }
            }

            if (tick % 40 === 0) {
                // increase timer
                $scope.time = $scope.time + 1;
                $scope.progress_value = ($scope.time * 100) / music_length;

                // increase unrecognized_count
                if ($scope.time > 7 && $scope.time < 210) {
                    if ($scope.recognition_state === "non") {
                     $scope.unrecognized_count = $scope.unrecognized_count + 1;
                    } else {
                        $scope.unrecognized_count = 0;
                        $scope.recognition_state = "non";
                    }
                }

                // volume control
                if ($scope.unrecognized_count > 6 && $scope.session_num !== 3) $cordovaNativeAudio.setVolumeForComplexAsset('music', 0.1);
                else if($scope.time > 7) $cordovaNativeAudio.setVolumeForComplexAsset('music', 1.0);

                // change session
                if ($scope.time > 70 && $scope.session_num === 0) { // 2번째 session
                    // change session num
                    $scope.session_num = 1;
                    $scope.session_image = "img/hug.png";
                    // change description
                    $scope.description_first = "세월호 희생자들을 안아주는 것을 형상화,";
                    $scope.description_second = "핸드폰을 가슴 위에 대고 앞뒤로 움직이는 제스처입니다.";
                    // change template
                    one_template = forward_template;
                    two_template = backward_template;
                    frame_size = Math.min(one_template.length, two_template.length);
                    console.log('A Length of the first and second template  : ' + one_template.length + ', ' + two_template.length);
                } else if ($scope.time > 130 && $scope.session_num === 1) {
                    // change session num
                    $scope.session_num = 2;
                    $scope.session_image = "img/fist.png";
                    // change description
                    $scope.description_first = "세월호 참사를 함께 기억하는 것을 형상화.";
                    $scope.description_second = "핸드폰을 손을 내밀듯이 앞 뒤로 움직이는 제스처입니다.";
                    // change template
                    one_template = up_template;
                    two_template = down_template;
                    frame_size = Math.min(one_template.length, two_template.length);
                    console.log('A Length of the first and second template  : ' + one_template.length + ', ' + two_template.length);
                } else if ($scope.time > 198 && $scope.session_num === 2) {
                    // change session num
                    $scope.session_num = 3;
                    $scope.symbol = {width:'200px'};
                    $scope.session_image = "img/ribbon.png";
                    $scope.description = false;
                    // stop gesture
                    $scope.gesture_recog = false;
                    $cordovaNativeAudio.stop('beat');
                    $cordovaNativeAudio.setVolumeForComplexAsset('music', 1.0);
                } else if ($scope.time > 252) {
                    // stop music
                    $scope.stopGame();
                }

                //if(($scope.time > 12 && $scope.time < 70) || ($scope.time > 88 && $scope.time < 136) || ($scope.time > 156 && $scope.time < 210)) {
                //    var index = rhythm_info.indexOf($scope.time);
                //    if(index !== -1) {
                //        if(index % 2 == 0) {
                //            $cordovaNativeAudio.play('effect_one');
                //
                //        } else {
                //            $cordovaNativeAudio.play('effect_two');
                //            $scope.recognition_state = "non";
                //        }
                //        // 진동이 있으면 진동까지
                //    }
                //}
            }

            if($scope.gesture_recog){
                // get accelerometer data
                $cordovaDeviceMotion.getCurrentAcceleration().then(function (result) {

                    $scope.analysis_index++;

                    // calculate similarity
                    if ($scope.collection_features.length > frame_size) {
                        $scope.collection_features.shift();
                        $scope.collection_feature_magnitudes.shift();

                        // calculate average magnitude
                        var sum = 0;
                        for (var i = $scope.collection_feature_magnitudes.length - 5; i < $scope.collection_feature_magnitudes.length; i++)
                            sum += $scope.collection_feature_magnitudes[i];
                        $scope.avg_magnitude = sum / $scope.collection_feature_magnitudes.length;

                        if ($scope.analysis_index % 2 == 0 && $scope.avg_magnitude > 0.2) {

                            // get similarity
                            if ($scope.pre_gesturestate !== 'One') {
                                // Right or None
                                var left_distance = $analyzer.getSimilarity(one_template, $scope.collection_features);
                                if (left_distance < 17.5) {
                                    console.log('One Gesture ' + tick);
                                    $scope.recognition_state = "One";
                                    $scope.pre_gesturestate = "One";
                                    $scope.socket.emit('Gesture', {name: my_name, timestamp: new Date().getTime()});
                                }
                            } else if ($scope.pre_gesturestate !== 'Two') {
                                var right_distance = $analyzer.getSimilarity(two_template, $scope.collection_features);
                                if (right_distance < 17.5) {
                                    console.log('Two Gesture ' + tick);
                                    $scope.recognition_state = "Two";
                                    $scope.pre_gesturestate = "Two";
                                    $scope.socket.emit('Gesture', {name: my_name, timestamp: new Date().getTime()});
                                }
                            }
                        }
                    }

                    // remove gravity
                    var alpha = 0.8;
                    gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
                    gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
                    gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;

                    // normalize and make collection_features
                    var frame_feature = [];
                    var magnitude = Math.sqrt((result.x - gravity[0]) * (result.x - gravity[0]) + (result.y - gravity[1]) * (result.y - gravity[1]) + (result.z - gravity[2]) * (result.z - gravity[2]));
                    frame_feature.push((result.x - gravity[0]) / magnitude);
                    frame_feature.push((result.y - gravity[1]) / magnitude);
                    frame_feature.push((result.z - gravity[2]) / magnitude);
                    $scope.collection_features.push(frame_feature);
                    $scope.collection_feature_magnitudes.push(magnitude);

                }, function (err) {
                });
            }

        }, 25);
    };


    // [Game] Stop
    $scope.stopGame = function() {
        if($scope.stop !== null) {
            $interval.cancel($scope.stop);
            $scope.stop = null;
        }
        $cordovaNativeAudio.stop('music');
        $cordovaNativeAudio.stop('beat');
    }

})



.controller('adminCtrl', function($scope, $mdDialog, $localstorage, $state){
    /* 제스처에 대한 설명을 하고 각 제스처를 트레이닝 할 수 있는 화면 */
    console.log('Start: Gesture Ctrl');

    $scope.checkbox_data = {ship: false, hug: false, fist: false};

    // initialize checkbox
    var left = $localstorage.getTemplate('Left');
    var right = $localstorage.getTemplate('Right');
    var forward = $localstorage.getTemplate('Forward');
    var backward = $localstorage.getTemplate('Backward');
    var up = $localstorage.getTemplate('Up');
    var down = $localstorage.getTemplate('Down');

    if(!isEmpty(left) && !isEmpty(right)) {
        console.log('Ship gesture has trained already');
        $scope.checkbox_data['ship'] = true;
    }
    if(!isEmpty(forward) && !isEmpty(backward)) {
        console.log('Hug gesture has trained already');
        $scope.checkbox_data['hug'] = true;
    }
    if(!isEmpty(up) && !isEmpty(down)) {
        console.log('Fist gesture has trained already');
        $scope.checkbox_data['fist'] = true;
    }
    function isEmpty(obj) {
      return Object.keys(obj).length === 0;
    }

    // show dialog
    $scope.showTrainDialog = function(gesture) {
        console.log('Function: showTrainDialog for ' + gesture);

        // gesture_가 붙은 것은 gesture template
        $scope.gesture_name = gesture;

        $mdDialog.show({
          controller: trainController,
          templateUrl: 'templates/_admin_train.html',
          parent: angular.element(document.body),
          clickOutsideToClose:true,
          scope: $scope,
          preserveScope: true
        })
        .then(function(answer) {
          console.log(answer);
        }, function() {
          console.log('cancelled');
        });

    };

    function trainController($scope, $mdDialog, $interval, $cordovaDeviceMotion, $analyzer, $cordovaNativeAudio, $localstorage) {
        /* 제스처를 트레이닝하는 다이얼로그 */
        console.log('Start: Train Controller');

        // setting information
        var train_information = {
            ship: {train_title: '배모양', train_image_path: 'img/cruise.png', train_subone_title: '왼방향', train_subtwo_title: '오른방향', train_subone_name: 'Left', train_subtwo_name: 'Right'},
            hug: {train_title: '포옹', train_image_path: 'img/hug.png', train_subone_title: '앞방향', train_subtwo_title: '뒷방향', train_subone_name: 'Forward', train_subtwo_name: 'Backward'},
            fist: {train_title: '다짐', train_image_path: 'img/fist.png', train_subone_title: '윗방향', train_subtwo_title: '아랫방향', train_subone_name: 'Up', train_subtwo_name: 'Down'}
        };
        $scope.train_data = train_information[$scope.gesture_name];

        // guide messages
        var train_guide = {ready: "제스처 등록을 시작해주세요.", waiting: "움직이 없이 기다려주세요.", starting: "제스처를 시작해주세요.", collecting: "수집중 입니다.", finished: "수집이 완료되었습니다."};
        $scope.train_guide_message = train_guide['ready'];

        // training functions
        var stop = undefined;

        // temporary storage
        $scope.subgesture_one_template = [];
        $scope.subgesture_two_template = [];

        $scope.train_start = function(index) {
            // collect data for a subGesture
            console.log('Function: train_start');

            // to prevent from calling multiple function at once.
            $scope.train_stop();

            // set message
            $scope.train_guide_message = train_guide['waiting'];

            // Data set
            var recorded_data = [
                [], // For_X
                [], // For_Y
                [] // For_Z
            ];
            var magnitude_array = [];

            // Status Variables
            var isRecording = false;
            var isStable = false;

            // start collection...
            var gravity = [0, 0, 0];
            stop = $interval(function() {
              // get accelerometer data
              $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {

                  // remove gravity
                  var alpha = 0.8;

                  gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
                  gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
                  gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;

                  var x = result.x - gravity[0];
                  var y = result.y - gravity[1];
                  var z = result.z - gravity[2];
                  var magnitude = Math.sqrt(x * x + y * y + z * z);

                  // add magnitude value to magnitude array
                  magnitude_array.push(magnitude);

                  var avg = 10000;  // Quite Large AVG
                  if(magnitude_array.length > 5) { // 5는 magnitude average 의 크기
                    var sum = 0;
                    for(var i = 0; i < magnitude_array.length; i++)
                        sum += magnitude_array[i];
                    avg = sum / magnitude_array.length;
                    magnitude_array.shift();
                  }

                  if(isRecording === false && isStable === false) { // before stable
                    if(avg < 0.5) { // stable
                        isStable = true;
                        $scope.train_guide_message = train_guide['starting'];
                    }
                  } else if(isRecording === false && isStable === true) { // After stable
                    if(avg > 1.5) { // moving
                        isRecording = true;
                        $scope.train_guide_message = train_guide['collecting'];
                    }
                  } else if(isRecording === true && isStable === true) {  // During Recording
                    if(avg < 1 && recorded_data[0].length > 10) {
                        $scope.train_stop();
                        $scope.train_guide_message = train_guide['finished'];
                        var template = [];
                        for(var j = 0; j < recorded_data[0].length; j++) {
                                var feature = [];
                                var mag = Math.sqrt(recorded_data[0][j] * recorded_data[0][j] + recorded_data[1][j] * recorded_data[1][j] + recorded_data[2][j] * recorded_data[2][j]);
                                feature.push(recorded_data[0][j] / mag); // x
                                feature.push(recorded_data[1][j] / mag); // y
                                feature.push(recorded_data[2][j] / mag); // z
                                template.push(feature);
                        }
                        if(index === 0)
                            $scope.subgesture_one_template = template;
                        else
                            $scope.subgesture_two_template = template;
                    } else {
                        recorded_data[0].push(x);
                        recorded_data[1].push(y);
                        recorded_data[2].push(z);
                    }
                  }
              }, function(err) {
                // An error occurred. Show a message to the user
              });
            }, 25);
        };

        $scope.train_stop = function() {
            // stop collection
            console.log('Function: train_stop');
            if (angular.isDefined(stop)) {
              $interval.cancel(stop);
              stop = undefined;
            }
        };

        // testing functions
        $scope.train_test_start = function() {
            if ( angular.isDefined(stop) ) return;

            // start test
            if($scope.subgesture_one_template !== [] && $scope.subgesture_two_template !== []) {
                console.log('Function: train_test_start' + $scope.train_data['train_title']);
            } else {
                alert('트레이닝이 완료된 후에 테스트를 할 수 있습니다.');
                return;
            }

            // initialize raw mode
            $scope.collection_features = [];
            $scope.collection_feature_magnitudes = [];
            $scope.analysis_index = 0;

            $scope.current_state = "Non";

            // get templates from local storage
            var left_template = $scope.subgesture_one_template;
            var right_template = $scope.subgesture_two_template;
            if(left_template.length === 0)
                left_template = $localstorage.getTemplate($scope.train_data['train_subone_name'])['subgesture'];
            if(right_template.length === 0)
                right_template = $localstorage.getTemplate($scope.train_data['train_subtwo_name'])['subgesture'];
            var frame_size = Math.min(left_template.length, right_template.length); // 이거 어떻게 정해야하는지 고민되는 구만
            console.log('A Length of a first template : ' + left_template.length);
            console.log(left_template);
            console.log('A Length of a second template : : ' + right_template.length);
            console.log(right_template);

            $scope.left_distance = 0;
            $scope.right_distance = 0;

            // start collecting
            var gravity = [0, 0, 0];
            stop = $interval(function() {
              // get accelerometer data
              $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {

                  $scope.analysis_index++;

                  // calculate similarity
                  if($scope.collection_features.length > frame_size) {
                     $scope.collection_features.shift();
                     $scope.collection_feature_magnitudes.shift();

                     // calculate average magnitude
                     var sum = 0;
                     for(var i = $scope.collection_feature_magnitudes.length - 5; i < $scope.collection_feature_magnitudes.length; i++)
                        sum += $scope.collection_feature_magnitudes[i];
                     $scope.avg_magnitude = sum / $scope.collection_feature_magnitudes.length;

                     if($scope.analysis_index % 2 == 0 && $scope.avg_magnitude > 0.2) {
                         // 현재 Left 인지 Right 인지로 구분해서 하면 되겠구나
                         if($scope.current_state !== 'Left') {
                            // Right or None
                            var left_distance = $analyzer.getSimilarity(left_template, $scope.collection_features);
                            if(left_distance < 15) {
                                console.log('Left Gesture');
                                $scope.current_state = 'Left';
                                $scope.guide_message = 'Left';
                                $scope.left_distance = left_distance;
                                // 소리 Play
                                $cordovaNativeAudio.play('effect_one');
                            }
                         } else if($scope.current_state !== 'Right') {
                            var right_distance = $analyzer.getSimilarity(right_template, $scope.collection_features);
                            if(right_distance < 15) {
                                console.log('Right Gesture');
                                $scope.current_state = 'Right';
                                $scope.guide_message = 'Right';
                                $scope.right_distance = right_distance;
                                // 소리 Play
                                $cordovaNativeAudio.play('effect_two');
                            }
                         }
                     }
                  }

                  // remove gravity
                  var alpha = 0.8;
                  gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
                  gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
                  gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;

                  // normalize and make collection_features
                  var frame_feature = [];
                  var magnitude = Math.sqrt((result.x - gravity[0]) * (result.x - gravity[0]) + (result.y - gravity[1]) * (result.y - gravity[1]) + (result.z - gravity[2]) * (result.z - gravity[2]));
                  frame_feature.push((result.x - gravity[0]) / magnitude);
                  frame_feature.push((result.y - gravity[1]) / magnitude);
                  frame_feature.push((result.z - gravity[2]) / magnitude);
                  $scope.collection_features.push(frame_feature);
                  $scope.collection_feature_magnitudes.push(magnitude);

              }, function(err) {
                // An error occurred. Show a message to the user

              });
            }, 25);
        };

        // dialog functions
        $scope.answer = function(answer) {
            if(answer === 'complete') {
                $localstorage.setTemplate( $scope.train_data['train_subone_name'], {subgesture:$scope.subgesture_one_template});
                $localstorage.setTemplate( $scope.train_data['train_subtwo_name'], {subgesture:$scope.subgesture_two_template});
            }
            $mdDialog.hide(answer);
            $scope.checkbox_data[$scope.gesture_name] = true;
        };

    }

    $scope.ImReady = function() {
        console.log('Function: ImReady');
        $state.go('game');

    };
});


//.controller('loginCtrl', function($scope, $state, $localstorage) {
//    /* Login Controller: 서버 접속할 때 사용할 아이디를 설정함. */
//    console.log('Start: Login Controller');
//
//    $scope.startParticipant = function() {
//        if($scope.name === "") {
//            alert('이름을 입력해주세요.');
//        } else {
//            $localstorage.setID($scope.name);
//            $state.go('gesture');
//        }
//    };
//
//})

//
//.controller('homeCtrl', function($scope, $cordovaDeviceMotion, $interval, $state, $analyzer, $communication, $ionicPopup) {
//
//  $scope.option = {animation: false, pointDot: false, datasetFill : false,
//                    scaleOverride : true, scaleSteps : 8, scaleStepWidth : 5, scaleStartValue : -20 };
//  $scope.option_analysis = {animation: false, pointDot: false, datasetFill : false};
//
//  $scope.raw_graph = true;
//  $scope.feature_graph = true;
//
//  // for feature data
//  $scope.change_mode = true;
//  $scope.feature_mode = "Avg";
//
//  $scope.series = ['X', 'Y', 'Z'];
//  $scope.data = [
//        [], // x
//        [], // y
//        []  // z
//  ];
//  $scope.timestamp = [];
//  $scope.labels = [];
//
//  // for recording
//  $scope.isCollecting = false;
//  $scope.recording_message = "";
//
//  var total_sample_size = 199;
//  var stop;
//  $scope.startCollection = function() {
//
//    if ( angular.isDefined(stop) ) return;
//
//    // initialize raw mode
//    // for raw data
//    $scope.series = ['X', 'Y', 'Z'];
//    $scope.data = [
//        [], // x
//        [], // y
//        []  // z
//    ];
//    $scope.timestamp = [];
//    $scope.labels = [];
//
//    // initialize analysis mode
//    $scope.change_mode = false;
//    $scope.data_analysis = [
//            [], // For_X
//            [], // For_Y
//            []  // For_Z
//    ];
//    $scope.labels_analysis = [];
//
//    if( $scope.feature_mode === "Avg") {
//      $scope.series_analysis = ['AVG_X', 'AVG_Y', 'AVG_Z'];
//    } else if($scope.feature_mode === "Std") {
//      $scope.series_analysis = ['Std_X', 'Std_Y', 'Std_Z'];
//    } else if($scope.feature_mode === "1-dev") {
//      $scope.series_analysis = ['1Dev_X', '1Dev_Y', '1Dev_Z'];
//    }
//
//    // start collecting
//    var gravity = [0, 0, 0];
//    stop = $interval(function() {
//      // get accelerometer data
//      $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {
//
//          // set raw data
//          if($scope.data[0].length > total_sample_size) {
//             $scope.data[0].shift();
//             $scope.data[1].shift();
//             $scope.data[2].shift();
//             $scope.timestamp.shift();
//             $scope.labels.shift();
//          }
//
//          // remove gravity
//          var alpha = 0.8;
//
//          gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
//          gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
//          gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;
//
//
//          $scope.data[0].push(result.x - gravity[0]);
//          $scope.data[1].push(result.y - gravity[1]);
//          $scope.data[2].push(result.z - gravity[2]);
//          $scope.labels.push('-');
//          $scope.timestamp.push(result.timestamp);
//
//          if($scope.data_analysis[0].length > total_sample_size) {
//             $scope.data_analysis[0].shift();
//             $scope.data_analysis[1].shift();
//             $scope.data_analysis[2].shift();
//             $scope.labels_analysis.shift();
//          }
//
//          // set feature data
//          var window_size = 10.0;
//          if($scope.data[0].length > window_size) {
//              // create frame
//              var frame_x = [];
//              var frame_y = [];
//              var frame_z = [];
//
//              for(var i = $scope.data[0].length - window_size; i < $scope.data[0].length; i++) {
//                    frame_x.push($scope.data[0][i]);
//                    frame_y.push($scope.data[1][i]);
//                    frame_z.push($scope.data[2][i]);
//              }
//
//              if($scope.feature_mode === 'Avg') {
//                  // 1. average
//                  $scope.data_analysis[0].push($analyzer.getAvg(frame_x));
//                  $scope.data_analysis[1].push($analyzer.getAvg(frame_y));
//                  $scope.data_analysis[2].push($analyzer.getAvg(frame_z));
//
//              } else if ($scope.feature_mode === 'Std') {
//                  // 2. std
//                  $scope.data_analysis[0].push($analyzer.getStd(frame_x));
//                  $scope.data_analysis[1].push($analyzer.getStd(frame_y));
//                  $scope.data_analysis[2].push($analyzer.getStd(frame_z));
//
//              } else if ($scope.feature_mode === '1-dev') {
//                  // 3. 1-dev
//                  $scope.data_analysis[0].push($analyzer.get1dev(frame_x));
//                  $scope.data_analysis[1].push($analyzer.get1dev(frame_y));
//                  $scope.data_analysis[2].push($analyzer.get1dev(frame_z));
//              }
//
//              $scope.labels_analysis.push('-');
//          }
//
//      }, function(err) {
//        // An error occurred. Show a message to the user
//      });
//    }, 25);
//
//  };
//
//  $scope.stopCollection = function() {
//
//    if (angular.isDefined(stop)) {
//      $interval.cancel(stop);
//      stop = undefined;
//      $scope.change_mode = true;
//      $scope.isCollecting = false;
//      $scope.recording_message = "";
//    }
//  };
//
//  $scope.startAnalysis = function() {
//        $scope.stopCollection();
//        $state.go('analysis', {raw_data: {data: $scope.data, labels: $scope.labels}});
//  };
//
//  $scope.sendGesture = function() {
//        $scope.stopCollection();
//        $scope.series = ['Magnitude'];
//        $scope.data = [
//            [] // x
//        ];
//        $scope.timestamp = [];
//        $scope.labels = [];
//
//        $scope.change_mode = false;
//        $scope.data_analysis = [
//                [], // For_X
//                [], // For_Y
//                []  // For_Z
//        ];
//        $scope.labels_analysis = [];
//        $scope.feature_graph = false;
//
//        $scope.isCollecting = true;
//        $scope.recording_message = "잠시만 기다려주세요";
//        var isRecording = false;
//        var isStable = false;
//
//        // recorded gesture
//        var recorded_data = [
//            [], // For_X
//            [], // For_Y
//            [], // For_Z
//            []  // Magnitude
//        ];
//        var recorded_labels = [];
//
//        // start collection...
//        var gravity = [0, 0, 0];
//        stop = $interval(function() {
//          // get accelerometer data
//          $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {
//
//              // set raw data
//              if($scope.data[0].length > 30) {
//                 $scope.data[0].shift();
//                 $scope.timestamp.shift();
//                 $scope.labels.shift();
//              }
//
//              // remove gravity
//              var alpha = 0.8;
//
//              gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
//              gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
//              gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;
//
//              var x = result.x - gravity[0];
//              var y = result.y - gravity[1];
//              var z = result.z - gravity[2];
//              var magnitude = Math.sqrt(x * x + y * y + z * z);
//
//              $scope.data[0].push(magnitude);
//              $scope.labels.push('-');
//              $scope.timestamp.push(result.timestamp);
//
//              // threshold
//              // if length is not enough
//              var avg_magnitude = 10;
//              // if length enough
//              if(recorded_labels.length > 10) {
//                  var frame_size = 5;
//                  var sum_magnitude = 0;
//                  for(var i = recorded_data[3].length - frame_size; i < recorded_data[3].length; i++)
//                      sum_magnitude = sum_magnitude + recorded_data[3][i];
//                  avg_magnitude = (sum_magnitude + magnitude) / (frame_size + 1);
//              }
//
//              // after smoothing (i.e., removing gravity)
//              if($scope.data[0].length > 30 && isStable === false) {
//                  isStable = true;
//                  $scope.recording_message = "제스처를 시작해주세요";
//              }
//
//              if(isStable === true) {
//                if(magnitude > 3 && isRecording === false && recorded_labels.length === 0) {
//                    isRecording = true;
//                    $scope.recording_message = "제스처 수집중";
//                } else if(avg_magnitude < 2 && isRecording === true && recorded_labels.length > 10) {
//                    $scope.recording_message = "제스처 수집 종료";
//                    isRecording = false;
//                    $scope.stopCollection();
//
//                    // show data;
//                    $scope.series = ['X', 'Y', 'Z'];
//                    $scope.data = [[],[],[]];
//                    $scope.data[0] = recorded_data[0];
//                    $scope.data[1] = recorded_data[1];
//                    $scope.data[2] = recorded_data[2];
//                    $scope.labels = recorded_labels;
//
//                   //show confirm dialog
//                   // An elaborate, custom popup
//                   $scope.data = {};
//                   var confirmPopup = $ionicPopup.show({
//                     template: '<input ng-model="data.id">',
//                     title: 'Enter Ground ID',
//                     subTitle: 'Please use normal things',
//                     scope: $scope,
//                     buttons: [
//                       { text: 'Cancel' },
//                       {
//                         text: '<b>Save</b>',
//                         type: 'button-positive',
//                         onTap: function(e) {
//                             return $scope.data.id;
//                         }
//                       }
//                     ]
//                   });
//                   confirmPopup.then(function(res) {
//                     if(res) {
//                         var body = {
//                            ground_name: $scope.data.id,
//                            accel_x: recorded_data[0],
//                            accel_y: recorded_data[1],
//                            accel_z: recorded_data[2]
//                        };
//                        $communication.saveGround(body, function(res) {
//                            if(res.type === true) {
//                                alert('성공적으로 저장하였습니다.');
//                            } else {
//                                alert('저장에 실패하였습니다.');
//                            }
//                        }, function() {
//                            console.log('error');
//                        })
//                     }
//                   });
//
//                }
//              }
//
//              // record gesture
//              if(isRecording) {
//                recorded_data[0].push(x);
//                recorded_data[1].push(y);
//                recorded_data[2].push(z);
//                recorded_data[3].push(magnitude);
//                recorded_labels.push('-');
//              }
//
//          }, function(err) {
//            // An error occurred. Show a message to the user
//          });
//        }, 25);
//
//  };
//
//  $scope.goDemo = function() {
//         $scope.stopCollection();
//         $state.go('demo');
//  };
//
//  $scope.saveCollection =  function() {
//
//      $scope.collection = {};
//      console.log('save collection');
//      var collectionPopup = $ionicPopup.show({
//         template: '<input ng-model="collection.collection_popup_name">',
//         title: 'Enter Collection ID',
//         subTitle: 'Please use normal things',
//         scope: $scope,
//         buttons: [
//           { text: 'Cancel' },
//           {
//             text: '<b>Save</b>',
//             type: 'button-positive',
//             onTap: function(e) {
//                 return $scope.collection.collection_popup_name;
//             }
//           }
//         ]
//       });
//       collectionPopup.then(function(res) {
//         if(res) {
//
//            var body = {
//              series: $scope.series,
//              data: $scope.data,
//              collection_name: $scope.collection.collection_popup_name
//            };
//
//          $communication.saveCollection(body, function(res) {
//            if(res.type) {
//                console.log('save collection success');
//            } else {
//                console.log('save collection fail');
//            }
//          }, function() {
//                console.log('save collection fail');
//          });
//
//         }
//       });
//
//
//  };
//
//});

//.controller('analysisCtrl', function($scope, $ionicHistory, $stateParams, $communication, $analyzer) {
//    $scope.menu_graph = true;
//    $scope.menu_feature = false;
//    $scope.menu_method = false;
//
//    $scope.changeMenu = function(menu) {
//        $scope.menu_graph = false;
//        $scope.menu_feature = false;
//        $scope.menu_method = false;
//
//        if(menu === 'Graph')
//            $scope.menu_graph = true;
//        if(menu === 'Feature')
//            $scope.menu_feature = true;
//        if(menu === 'Method')
//            $scope.menu_method = true;
//
//    };
//
//    $scope.goBack = function() {
//        $ionicHistory.goBack();
//    };
//
//    $scope.option = {animation: false, pointDot: false, datasetFill : false, showTooltips: false };
//
//    $scope.option_ground = {animation: false, pointDot: false, datasetFill : false, showTooltips: false};
//
//    $scope.option_analysis = {animation: false, pointDot: false, datasetFill : false, showTooltips: false};
//
//    $scope.raw_graph = true;
//    $scope.ground_graph = true;
//    $scope.analysis_graph = false;
//
//    $scope.analysis_available = false;
//
//    // set raw data
//    $scope.series = ['X', 'Y', 'Z'];
//    var raw_data = $stateParams.raw_data.data;
//    var raw_length = Math.min(raw_data[0].length, raw_data[1].length, raw_data[2].length);
//    var filtered_data = [[],[],[]];
//    for(var i = 0; i < raw_length; i++) {
//        filtered_data[0].push(raw_data[0][i]);
//        filtered_data[1].push(raw_data[1][i]);
//        filtered_data[2].push(raw_data[2][i]);
//    }
//    $scope.data = filtered_data;
//    $scope.labels = $stateParams.raw_data.labels;
//
//    // set ground data
//    $scope.series_ground = ['Ground_X', 'Ground_Y', 'Ground_Z'];
//    $scope.data_ground = [
//        [], // For X
//        [], // For Y
//        []  // For Z
//    ];
//
//    // 분석 시작
//    var ground_gestures = [];
//    var body = {};
//    // 1. get ground gesture from sever
//    $communication.getGround(body, function(res) {
//
//        if(res.type === true){
//            var num_gestures = res.data.length;
//            for(i = 0; i < num_gestures; i++) {
//                var ground_id = res.data[i].template_name;
//                var ground_data = [
//                    [], // For X
//                    [], // For Y
//                    []
//                ];
//
//                ground_data[0] = res.data[i].accel_x;
//                ground_data[1] = res.data[i].accel_y;
//                ground_data[2] = res.data[i].accel_z;
//                ground_gestures.push({ground_id: ground_id, ground_data: ground_data});
//            }
//
//            // 2. show gesture graph
//            $scope.data_ground = ground_gestures[0].ground_data;
//            $scope.analysis_available = true;
//            var labels = [];
//            for(var i = 0; i < ground_gestures[0].ground_data[0].length; i++) {
//                labels.push('-');
//            }
//            $scope.labels_ground = labels;
//        }
//
//    }, function() {
//        console.log('error');
//    });
//
//    // feature set
//    $scope.feature_x = true;
//    $scope.feature_y = true;
//    $scope.feature_z = true;
//    $scope.feature_magnitude = true;
//    $scope.feature_x_dev = true;
//    $scope.feature_y_dev = true;
//    $scope.feature_z_dev = true;
//
//    $scope.startAnalysis = function() {
//
//        // Initialize
//        $scope.raw_graph = true;
//        $scope.ground_graph = false;
//        $scope.analysis_graph = true;
//
//        // set analysis data
//        $scope.series_analysis = new Array(ground_gestures.length);
//        for(i = 0; i < ground_gestures.length; i++)
//                $scope.series_analysis[i] = ground_gestures[i].ground_id;
//
//        // Ground Features
//        var featured_gestures = [];
//        var num_gestures = ground_gestures.length;
//        for(var k = 0; k < num_gestures; k++) {
//            var ground_data = ground_gestures[k].ground_data;
//
//            var ground_features = [];
//            var ground_data_length = ground_data[0].length;
//            // set features of ground data
//            // i === 1 인 이유는 dev 때문에
//            for(var i = 1; i < ground_data_length; i++) {
//                var ground_feature = [];
//                if($scope.feature_x)
//                    ground_feature.push(ground_data[0][i]);
//                if($scope.feature_y)
//                    ground_feature.push(ground_data[1][i]);
//                if($scope.feature_z)
//                    ground_feature.push(ground_data[2][i]);
//                if($scope.feature_magnitude)
//                    ground_feature.push(Math.sqrt(ground_data[0][i]*ground_data[0][i] + ground_data[1][i]*ground_data[1][i] + ground_data[2][i]*ground_data[2][i]));
//                if($scope.feature_x_dev)
//                    ground_feature.push(ground_data[0][i] - ground_data[0][i-1]);
//                if($scope.feature_y_dev)
//                    ground_feature.push(ground_data[1][i] - ground_data[1][i-1]);
//                if($scope.feature_z_dev)
//                    ground_feature.push(ground_data[2][i] - ground_data[2][i-1]);
//
//                ground_features.push(ground_feature);
//            }
//            featured_gestures.push({ground_id: ground_gestures[k].ground_id, ground_features: ground_features});
//        }
//
//        // Test Features
//        var frame_size = 30;
//        var similarities = [];
//        var labels_analysis = [];
//        for(k=0; k <num_gestures; k++) {
//            similarities.push([]);
//        }
//
//        for(i = 1; i < $scope.data[0].length - frame_size; i++) {
//            // 1. Create Frame with features
//            var frame_features = [];
//            for(var j = 0; j < frame_size; j++) {
//                var frame_feature = [];
//                if($scope.feature_x)
//                    frame_feature.push($scope.data[0][i+j]);
//                if($scope.feature_y)
//                    frame_feature.push($scope.data[1][i+j]);
//                if($scope.feature_z)
//                    frame_feature.push($scope.data[2][i+j]);
//                if($scope.feature_magnitude)
//                    frame_feature.push(Math.sqrt($scope.data[0][i+j]*$scope.data[0][i+j] + $scope.data[1][i+j]*$scope.data[1][i+j] + $scope.data[2][i+j]*$scope.data[2][i+j]));
//                if($scope.feature_x_dev)
//                    frame_feature.push($scope.data[0][i+j] - $scope.data[0][i+j - 1]);
//                if($scope.feature_y_dev)
//                    frame_feature.push($scope.data[1][i+j] - $scope.data[1][i+j - 1]);
//                if($scope.feature_z_dev)
//                    frame_feature.push($scope.data[2][i+j] - $scope.data[2][i+j - 1]);
//
//                frame_features.push(frame_feature);
//            }
//
//            // 2. Get DTW value
//            for(k=0; k < num_gestures; k++) {
//                similarities[k].push($analyzer.getSimilarity(featured_gestures[k].ground_features, frame_features));
//            }
//
//            labels_analysis.push('-');
//        }
//
//
//        for(k = 0; k < num_gestures; k++) {
//            var last_value = similarities[k][similarities[k].length - 1];
//            for(i = 0; i < frame_size; i++) {
//                similarities[k].push(last_value);
//            }
//        }
//        for(i = 0; i < frame_size; i++)
//            labels_analysis.push('-');
//
//
//        //3. show graph
//        $scope.data_analysis = similarities;
//        $scope.labels_analysis = labels_analysis;
//    };
//
//    // normalize
//    $scope.normalize = function() {
//        // raw data normalization
//        var data_length = $scope.data[0].length;
//        var normalized_data = [[],[],[]];
//        for(var i = 0; i < data_length; i++) {
//            var magnitude = Math.sqrt($scope.data[0][i] * $scope.data[0][i] + $scope.data[1][i] * $scope.data[1][i] + $scope.data[2][i] * $scope.data[2][i]);
//            normalized_data[0].push($scope.data[0][i] / magnitude);
//            normalized_data[1].push($scope.data[1][i] / magnitude);
//            normalized_data[2].push($scope.data[2][i] / magnitude);
//        }
//        $scope.data = normalized_data;
//
//        // ground data normalization
//        var num_gestures = ground_gestures.length;
//        var normalized_ground_gestures = new Array(num_gestures);
//
//        for(var k = 0; k < num_gestures; k++) {
//            var ground_id = ground_gestures[k].ground_id;
//            var ground_data = ground_gestures[k].ground_data;
//
//
//            var ground_data_length = ground_data[0].length;
//            var normalized_ground_data = [[],[],[]];
//
//            for(i = 0; i < ground_data_length; i++) {
//                var ground_magnitude = Math.sqrt(ground_data[0][i] * ground_data[0][i] + ground_data[1][i] * ground_data[1][i] + ground_data[2][i] * ground_data[2][i]);
//                normalized_ground_data[0].push(ground_data[0][i] / ground_magnitude);
//                normalized_ground_data[1].push(ground_data[1][i] / ground_magnitude);
//                normalized_ground_data[2].push(ground_data[2][i] / ground_magnitude);
//            }
//
//            normalized_ground_gestures[k] = {ground_id: ground_id, ground_data: normalized_ground_data};
//        }
//
//        ground_gestures = normalized_ground_gestures;
//        // 2. show gesture graph
//        $scope.data_ground = normalized_ground_gestures[0].ground_data;
//    };
//
//    $scope.denormalize = function() {
//        $scope.data = $stateParams.raw_data.data;
//        var body = {};
//        // 1. get ground gesture from sever
//        $communication.getGround(body, function(res) {
//            if(res.type === true ){
//                ground_data[0] = res.data.accel_x;
//                ground_data[1] = res.data.accel_y;
//                ground_data[2] = res.data.accel_z;
//
//                // 2. show gesture graph
//                $scope.data_ground = ground_data;
//                $scope.analysis_available = true;
//                var labels = [];
//                for(var i = 0; i < ground_data[0].length; i++) {
//                    labels.push('-');
//                }
//                $scope.labels_ground = labels;
//            }
//        }, function() {
//            console.log('error');
//        });
//    };
//
//})
//
//.controller('demoCtrl', function($scope, $rootScope, $localstorage, $ionicHistory, $communication, $analyzer, $interval, $cordovaDeviceMotion, $state, $socket, $cordovaMedia, $cordovaVibration) {
//
//
//    console.log('demo Controller');
//
//    var my_name = $localstorage.getID();
//    console.log('my_name  ' + my_name);
//
//
//    // socket init
//    $scope.socket = $socket.getSocket();
//    $scope.socket.emit('Add User', my_name);
//
//    $scope.option = {animation: false, pointDot: false, datasetFill : false,
//                    scaleOverride : true, scaleSteps : 8, scaleStepWidth : 5, scaleStartValue : -20 };
//
//    $scope.option_analysis = {animation: false, pointDot: false, datasetFill : false,
//                     scaleOverride : true, scaleSteps : 8, scaleStepWidth : 3, scaleStartValue : 0 };
//
//    $scope.received_channel = "None Yet";
//
//    // resume and pause
//    $rootScope.$watch('eventHappen', function() {
//        console.log($rootScope.eventHappen);
//        if($rootScope.eventHappen === "pause") {
//            $scope.socket.emit('Disconnect', my_name);
//        } else if($rootScope.eventHappen === "resume") {
//            $scope.socket.emit('Add User', my_name);
//        }
//    });
//
//    var left_src = "/audio/Left.mp3";
//    var left_media = $cordovaMedia.newMedia(left_src);
//
//    var right_src = "/audio/Right.mp3";
//    var right_media = $cordovaMedia.newMedia(right_src);
//
//    // socket on
//    $scope.socket.on('Rhythm', function(data) {
//        $scope.received_channel = 'Rhythm ' + data;
//        if(data === "Left") {
//            left_media.play(); // iOS only!
//        } else if (data === "Right") {
//            right_media.play(); // iOS only!
//        }
//    });
//
//    $scope.socket.on('Synchronized', function(data) {
//        console.log('Synchronized Event : ' + data);
//        $cordovaVibration.vibrate(3000);
//    });
//
//    $scope.socket.on('connect',function(){
//        console.log('connected');
//    });
//
//    // template을 서버에서 가져오기
//    // global template_dictionary
//    var template_dictionary = {};
//    // 분석을 위해 normalized 된 template feature
//    $scope.featured_templates = {};
//    // get template
//    $communication.getTemplates(function(res) {
//        if(res.type) {
//            console.log('get Templates success : # of templates = ' + res.data.length);
//            var temp_dic = {};
//            var templates = res.data;
//            templates.forEach(function(template) {
//                temp_dic[template.template_name] = template;
//            });
//            template_dictionary = temp_dic;
//
//            // normalize
//            // template data normalization
//            var template_keys = [];
//            for (var key in template_dictionary) {
//                if(template_dictionary.hasOwnProperty(key)) {
//                    template_keys.push(key);
//                }
//            }
//            console.log('normalize : template data / template_keys = ' + template_keys);
//            for(var k = 0; k < template_keys.length; k++) {
//                key = template_keys[k];
//                console.log(key);
//
//                var template_data_length = template_dictionary[key].accel_x.length;
//                var norm_accel_x = [];
//                var norm_accel_y = [];
//                var norm_accel_z = [];
//                for(i = 0; i < template_data_length; i++) {
//                    var template_magnitude = Math.sqrt(template_dictionary[key].accel_x[i] * template_dictionary[key].accel_x[i] + template_dictionary[key].accel_y[i] * template_dictionary[key].accel_y[i] + template_dictionary[key].accel_z[i] * template_dictionary[key].accel_z[i]);
//                    norm_accel_x.push(template_dictionary[key].accel_x[i] / template_magnitude);
//                    norm_accel_y.push(template_dictionary[key].accel_y[i] / template_magnitude);
//                    norm_accel_z.push(template_dictionary[key].accel_z[i] / template_magnitude);
//                }
//
//                template_dictionary[key].accel_x = norm_accel_x;
//                template_dictionary[key].accel_y = norm_accel_y;
//                template_dictionary[key].accel_z = norm_accel_z;
//            }
//
//            // template feature setting
//            var num_template = Object.keys(template_dictionary).length;
//            console.log('# of template : ' + num_template);
//            console.log('template names');
//            console.log(template_keys);
//
//            // set series
//            var series = [];
//            for(k = 0; k < template_keys.length; k++) {
//                series.push(template_dictionary[template_keys[k]].template_name);
//            }
//            $scope.series_analysis = series;
//
//            // Template Features
//            for(k = 0; k < template_keys.length; k++) {
//                console.log("Template name : " + template_dictionary[template_keys[k]].template_name);
//                var template_data = [];
//                template_data.push(template_dictionary[template_keys[k]].accel_x);
//                template_data.push(template_dictionary[template_keys[k]].accel_y);
//                template_data.push(template_dictionary[template_keys[k]].accel_z);
//
//                template_data_length = template_data[0].length;
//                console.log("Data Length : " + template_data_length);
//
//                var template_features = [];
//                for(var i = 1; i < template_data_length; i++) {
//                    var template_feature = [];
//                    template_feature.push(template_data[0][i]);
//                    template_feature.push(template_data[1][i]);
//                    template_feature.push(template_data[2][i]);
//                    template_features.push(template_feature);
//                }
//
//                $scope.featured_templates[template_dictionary[template_keys[k]].template_name] = template_features;
//            }
//
//            // set data_analysis
//            var similarities = []; // for each template
//
//            for(k = 0; k < num_template; k++) {
//                similarities.push([]);
//            }
//            $scope.data_analysis = similarities;
//            $scope.labels_analysis = [];
//        } else {
//            console.log('get Templates fail');
//        }
//    }, function() {
//        console.log('get Templates fail');
//    });
//
//
//    // 시작을 누르면 데이터를 수집하기
//    $scope.series = ['X', 'Y', 'Z'];
//    $scope.data = [
//        [], // x
//        [], // y
//        []  // z
//    ];
//    $scope.timestamp = [];
//    $scope.labels = [];
//
//    $scope.series_analysis = [];
//    $scope.data_analysis = [
//        [], // x
//        [] // y
//    ];
//    $scope.labels_analysis = [];
//
//    var total_sample_size = 100;
//    var stop;
//    var frame_size = 10;
//    var window_size = 1;
//
//    $scope.collection_features = [];
//    $scope.analysis_index = 0;
//    $scope.collection_feature_magnitudes = [];
//
//    $scope.sum_magnitude = 0;
//
//    $scope.startCollection = function() {
//
//        if ( angular.isDefined(stop) ) return;
//
//        // initialize raw mode
//        $scope.series = ['X', 'Y', 'Z'];
//        $scope.data = [
//            [], // x
//            [], // y
//            []  // z
//        ];
//        $scope.timestamp = [];
//        $scope.labels = [];
//
//        //
//        $scope.collection_features = [];
//        $scope.current_state = "Nothing";
//
//        $scope.state_style = {"background-color":"white"};
//
//        // start collecting
//        var gravity = [0, 0, 0];
//        stop = $interval(function() {
//          // get accelerometer data
//          $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {
//
//              var changed = false;
//
//              // set raw data
//              if($scope.data[0].length > total_sample_size) {
//                 $scope.data[0].shift();
//                 $scope.data[1].shift();
//                 $scope.data[2].shift();
//                 $scope.timestamp.shift();
//                 $scope.labels.shift();
//              }
//
//              // shift analysis data
//              if($scope.data_analysis[0].length > total_sample_size) {
//                  for(k = 0; k < $scope.series_analysis.length; k++) {
//                      $scope.data_analysis[k].shift();
//                  }
//                  $scope.labels_analysis.shift();
//              }
//
//              // calculate distance
//              if($scope.collection_features.length > frame_size) {
//                 $scope.collection_features.shift();
//                 $scope.collection_feature_magnitudes.shift();
//
//                 var sum = 0;
//                 for(var i = 0; i < $scope.collection_feature_magnitudes.length; i++) {
//                    sum += $scope.collection_feature_magnitudes[i];
//                 }
//
//                 $scope.avg_magnitude = sum / $scope.collection_feature_magnitudes.length;
//
//                 if($scope.analysis_index % 2 == 0) {
//
//                     if($scope.avg_magnitude > 2.0) {
//
//                         for (var k = 0; k < $scope.series_analysis.length; k++) {
//                             var distance = $analyzer.getSimilarity($scope.featured_templates[$scope.series_analysis[k]], $scope.collection_features);
//                             $scope.data_analysis[k].push(distance);
//                             if(distance < 7) {
//                                if($scope.current_state != $scope.series_analysis[k])
//                                    changed = true;
//                                $scope.current_state = $scope.series_analysis[k];
//                             }
//                         }
//
//                         if($scope.current_state === 'Left' && changed) {
//                            $scope.socket.emit('Rhythm', {state: 'Left', name: my_name});
//                            $scope.state_style = {"background-color":"#EF4444"};
//                            $scope.sum_magnitude = sum;
//                         }
//
//                         else if($scope.current_state === 'Right' && changed) {
//                            $scope.socket.emit('Rhythm', {state: 'Right', name: my_name});
//                            $scope.state_style = {"background-color":"#394BA0"};
//                            $scope.sum_magnitude = sum;
//
//                         }
//
//                     } else {
//                        for(k = 0; k < $scope.series_analysis.length; k++) {
//                            $scope.data_analysis[k].push(null);
//                        }
//                     }
//
//                 } else {
//                    for(k = 0; k < $scope.series_analysis.length; k++) {
//                        $scope.data_analysis[k].push(null);
//                    }
//                 }
//                 $scope.labels_analysis.push('-');
//              }
//
//              // remove gravity
//              var alpha = 0.8;
//
//              gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
//              gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
//              gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;
//
//
//              $scope.data[0].push(result.x - gravity[0]);
//              $scope.data[1].push(result.y - gravity[1]);
//              $scope.data[2].push(result.z - gravity[2]);
//              $scope.labels.push('-');
//              $scope.timestamp.push(result.timestamp);
//
//              // normalize and make collection_features
//              var frame_feature = [];
//              var magnitude = Math.sqrt((result.x - gravity[0]) * (result.x - gravity[0]) + (result.y - gravity[1]) * (result.y - gravity[1]) + (result.z - gravity[2]) * (result.z - gravity[2]));
//              frame_feature.push((result.x - gravity[0]) / magnitude);
//              frame_feature.push((result.y - gravity[1]) / magnitude);
//              frame_feature.push((result.z - gravity[2]) / magnitude);
//              $scope.collection_features.push(frame_feature);
//              $scope.collection_feature_magnitudes.push(magnitude);
//
//              $scope.analysis_index++;
//
//          }, function(err) {
//            // An error occurred. Show a message to the user
//          });
//        }, 25);
//
//    };
//
//    $scope.stopCollection = function() {
//
//        if (angular.isDefined(stop)) {
//          $interval.cancel(stop);
//          stop = undefined;
//          $scope.change_mode = true;
//          $scope.isCollecting = false;
//          $scope.recording_message = "";
//        }
//
//    };
//
//    $scope.goHome = function() {
//       $scope.stopCollection();
//       $state.go('home');
//    };
//
//
//    $scope.emitLeft = function() {
//        $scope.socket.emit('Rhythm', {state: 'Left', name: my_name});
//    };
//
//    $scope.emitRight = function() {
//        $scope.socket.emit('Rhythm', {state: 'Right', name: my_name});
//    };
//
//})
//
//.controller('ozCtrl', function($scope, $rootScope, $localstorage, $ionicHistory, $communication, $analyzer, $interval, $cordovaDeviceMotion, $state, $socket, $cordovaMedia, $cordovaVibration, $window) {
//
//    var my_name = $localstorage.getID();
//    console.log('Oz Controller : ' + my_name);
//
//    var my_index = -1;
//
//    // CSS ng styles
//    $scope.style_notconnected = {"background-color" : "black", "color": "white"};
//    $scope.message_notconnected = "접속되지 않음";
//    $scope.style_connected = {"background-color" : "#404040", "color": "white"};
//    $scope.message_connected = "접속됨. 준비 완료!";
//    $scope.style_notsynched = {"background-color" : "white", "color": "black"};
//    $scope.message_notsynched = "리듬에 맞춰서 제스처를 해주세요!";
//    $scope.style_synched = {"background-color" : "#01FF70", "color": "black"};
//    $scope.message_synched = "싱크가 되었습니다!";
//
//    $scope.origin_information = {"id":"Origin","style":$scope.style_notconnected,"me":false,"message":$scope.message_notconnected};
//    $scope.user1_information = {"id":"User1","style":$scope.style_notconnected,"me":false,"message":$scope.message_notconnected};
//    $scope.user2_information = {"id":"User2","style":$scope.style_notconnected,"me":false,"message":$scope.message_notconnected};
//
//    // Socket functions
//    $scope.socket = $socket.getSocket();
//    $scope.received_channel = "None Yet";
//
//    $scope.socket.on('connect',function(){
//        console.log('successfully connected');
//    });
//
//    // Login with ID
//    $scope.socket.emit('Login', my_name);
//
//    // 누군가 새로 들어온 경우에 Connected
//    $scope.socket.on('Connected', function(data) {
//        console.log(JSON.stringify(data));
//        var me = $localstorage.getID();
//
//        // UI update
//        for (var key in data) {
//          var index = data[key]["index"];
//          console.log(index);
//
//          if(index === 0) {
//            //Origin
//            $scope.origin_information.style = $scope.style_connected; // style
//            $scope.origin_information.message = $scope.message_connected; //Text
//            if(me === key) {
//                $scope.origin_information.me = true; // Me
//                my_index = 0;
//            }
//
//
//          } else if(index === 1) {
//            // User1
//            $scope.user1_information.id = key; // ID
//            $scope.user1_information.style = $scope.style_connected; // style
//            $scope.user1_information.message = $scope.message_connected; //Text
//            if(me === key) {
//                $scope.user1_information.me = true; // Me
//                my_index = 1;
//            }
//
//
//          } else if(index === 2) {
//            // User2
//            $scope.user2_information.id = key; // ID
//            $scope.user2_information.style = $scope.style_connected; // style
//            $scope.user2_information.message = $scope.message_connected; //Text
//            if(me === key) {
//                $scope.user2_information.me = true; // Me
//                my_index = 2;
//            }
//
//          }
//        }
//    });
//
//    $scope.socket.on('Started', function(data) {
//        console.log('Started');
//        $scope.origin_information.style = $scope.style_synched;
//        $scope.origin_information.message = $scope.message_synched;
//        $scope.user1_information.style = $scope.style_notsynched;
//        $scope.user1_information.message = $scope.message_notsynched;
//        $scope.user2_information.style = $scope.style_notsynched;
//        $scope.user2_information.message = $scope.message_notsynched;
//        $scope.startCollection();
//    });
//
//    $scope.socket.on('Stopped', function(data) {
//        console.log('Stopped');
//        console.log(JSON.stringify(data));
//         // UI update
//        for (var key in data) {
//          var index = data[key]["index"];
//          console.log(index);
//
//          if(index === 0) {
//            //Origin
//            $scope.origin_information.style = $scope.style_connected; // style
//            $scope.origin_information.message = $scope.message_connected;
//            if(me === key)
//                $scope.origin_information.me = true; // Me
//
//          } else if(index === 1) {
//            // User1
//            $scope.user1_information.id = key; // ID
//            $scope.user1_information.style = $scope.style_connected; // style
//            $scope.user1_information.message = $scope.message_connected;
//            if(me === key)
//                $scope.user1_information.me = true; // Me
//
//          } else if(index === 2) {
//            // User2
//            $scope.user2_information.id = key; // ID
//            $scope.user2_information.style = $scope.style_connected; // style
//            $scope.user2_information.message = $scope.message_connected;
//            if(me === key)
//                $scope.user2_information.me = true; // Me
//          }
//        }
//
//        $scope.stopCollection();
//    });
//
//    // 누군가 Disconnected 된 경우에
//    $scope.socket.on('Disconnected', function(data) {
//      var index = data;
//      // UI update
//      console.log(index);
//      if(index === 0) {
//        //Origin
//        $scope.origin_information = {"id":"Origin","style":$scope.style_notconnected,"me":false,"message":$scope.message_notconnected};
//      } else if(index === 1) {
//        // User1
//        $scope.user1_information = {"id":"User1","style":$scope.style_notconnected,"me":false,"message":$scope.message_notconnected};
//      } else if(index === 2) {
//        $scope.user2_information = {"id":"User2","style":$scope.style_notconnected,"me":false,"message":$scope.message_notconnected};
//      }
//    });
//
//    var left_src = "/audio/Left.mp3";
//    var left_media = $cordovaMedia.newMedia(left_src);
//    left_media.setVolume(0.5);
//
//    var right_src = "/audio/Right.mp3";
//    var right_media = $cordovaMedia.newMedia(right_src);
//    right_media.setVolume(0.5);
//
//    var one_src = "/audio/One.mp3";
//    var one_media = $cordovaMedia.newMedia(one_src);
//    one_media.setVolume(1);
//
//    var two_src = "/audio/Two.mp3";
//    var two_media = $cordovaMedia.newMedia(two_src);
//    two_media.setVolume(1);
//
//    var three_src = "/audio/Three.mp3";
//    var three_media = $cordovaMedia.newMedia(three_src);
//    three_media.setVolume(1);
//
//    $scope.socket.on('Success', function(data) {
//        console.log(data);
//        if(data === '1') {
//            one_media.play();
//        } else if(data === '2') {
//            two_media.play();
//        } else if(data === '3') {
//            three_media.play();
//        }
//    });
//
//    $scope.socket.on('Completed', function(data) {
//        console.log('Completed');
//        $scope.socket.emit('Disconnect', my_name);
//        $scope.stopCollection();
//        $state.go('end');
//    });
//
//    $scope.socket.on('Rhythm', function(data) {
//        $scope.received_channel = 'Rhythm ' + data;
//        if(data === "Left") {
//            left_media.play(); // iOS only!
//        } else if (data === "Right") {
//            right_media.play(); // iOS only!
//        }
//    });
//
//    $scope.socket.on('Synchronized', function(data) {
//        console.log('Synchronized');
//        if(my_name === 'Origin')
//            $cordovaVibration.vibrate(3000);
//        else if(data.name === my_name)
//            $cordovaVibration.vibrate(3000);
//
//        var index = data.index;
//        console.log('index : ' + index);
//        if(index === 1) {
//            $scope.user1_information.style = $scope.style_synched;
//            $scope.user1_information.message = $scope.message_synched;
//        } else if(index === 2) {
//            $scope.user2_information.style = $scope.style_synched;
//            $scope.user2_information.message = $scope.message_synched;
//        }
//    });
//
//    $scope.socket.on('Nosynchronized', function(data) {
//        console.log('Nosynchronized');
//
//        var index = data.index;
//        console.log('index : ' + index);
//        if(index === 1) {
//            $scope.user1_information.style = $scope.style_notsynched;
//            $scope.user1_information.message = $scope.message_notsynched;
//        } else if(index === 2) {
//            $scope.user2_information.style = $scope.style_notsynched;
//            $scope.user2_information.message = $scope.message_notsynched;
//        }
//    });
//
//    // resume and pause
//    $rootScope.$watch('eventHappen', function() {
//        console.log($rootScope.eventHappen);
//        if($rootScope.eventHappen === "pause") {
//            $scope.socket.emit('Disconnect', my_name);
//        } else if($rootScope.eventHappen === "resume") {
//            $scope.socket.emit('Login', my_name);
//        }
//    });
//
//    var stop = undefined;
//
//    // Start Collection
//    $scope.startCollection = function() {
//        if ( angular.isDefined(stop) ) return;
//        console.log('started to test gesture');
//
//        // status
//        $scope.current_state = "Nothing";
//        $scope.state_style = {"background-color":"white"};
//
//        //
//        $scope.testing = true;
//        $scope.left_button_activate = false;
//        $scope.right_button_activate = false;
//
//        // initialize raw mode
//        $scope.collection_features = [];
//        $scope.collection_feature_magnitudes = [];
//        $scope.analysis_index = 0;
//
//        $scope.current_state = "Non";
//
//        // get templates from local storage
//
//        var left_template = $localstorage.getLeftTemplate()["left"];
//        var right_template = $localstorage.getRightTemplate()["right"];
//        console.log('Left Length : ' + left_template.length);
//        console.log('Right Length : ' + right_template.length);
//        var frame_size = Math.min(left_template.length, right_template.length); // 이거 어떻게 정해야하는지 고민되는 구만
//
//        $scope.left_distance = 0;
//        $scope.right_distance = 0;
//
//        var left_src = "/audio/Left.mp3";
//        var left_media = $cordovaMedia.newMedia(left_src);
//        left_media.setVolume(0.5);
//
//        var right_src = "/audio/Right.mp3";
//        var right_media = $cordovaMedia.newMedia(right_src);
//        right_media.setVolume(0.5);
//
//        // start collecting
//        var gravity = [0, 0, 0];
//        stop = $interval(function() {
//          // get accelerometer data
//          $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {
//
//              $scope.analysis_index++;
//
//              // calculate similarity
//              if($scope.collection_features.length > frame_size) {
//                 $scope.collection_features.shift();
//                 $scope.collection_feature_magnitudes.shift();
//
//                 // calculate average magnitude
//                 var sum = 0;
//                 for(var i = $scope.collection_feature_magnitudes.length - 5; i < $scope.collection_feature_magnitudes.length; i++)
//                    sum += $scope.collection_feature_magnitudes[i];
//                 $scope.avg_magnitude = sum / $scope.collection_feature_magnitudes.length;
//
//                 if($scope.analysis_index % 2 == 0) {
//                     // 현재 Left 인지 Right 인지로 구분해서 하면 되겠구나
//                     if($scope.current_state !== 'Left') {
//                        // Right or None
//                        var left_distance = $analyzer.getSimilarity(left_template, $scope.collection_features);
//                        if(left_distance < 15) {
//                            console.log('Left Gesture');
//                            $scope.socket.emit('Rhythm', {state: 'Left', name: my_name});
//                            $scope.current_state = 'Left';
//                            $scope.guide_message = 'Left';
//                            $scope.left_distance = left_distance;
//                            if(my_index == 0)
//                                $scope.origin_information.message = "당신의 제스처 : Left!";
//                            else if(my_index == 1)
//                                $scope.user1_information.message = "당신의 제스처 : Left!";
//                            else if(my_index == 2)
//                                $scope.user2_information.message = "당신의 제스처 : Left!";
//                        }
//                     } else if($scope.current_state !== 'Right') {
//                        var right_distance = $analyzer.getSimilarity(right_template, $scope.collection_features);
//                        if(right_distance < 15) {
//                            console.log('Right Gesture');
//                            $scope.socket.emit('Rhythm', {state: 'Right', name: my_name});
//                            $scope.current_state = 'Right';
//                            $scope.guide_message = 'Right';
//                            $scope.right_distance = right_distance;
//
//                            if(my_index == 0)
//                                $scope.origin_information.message = "당신의 제스처 : Right!";
//                            else if(my_index == 1)
//                                $scope.user1_information.message = "당신의 제스처 : Right!";
//                            else if(my_index == 2)
//                                $scope.user2_information.message = "당신의 제스처 : Right!";
//                        }
//                     }
//                 }
//              }
//
//              // remove gravity
//              var alpha = 0.8;
//              gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
//              gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
//              gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;
//
//              // normalize and make collection_features
//              var frame_feature = [];
//              var magnitude = Math.sqrt((result.x - gravity[0]) * (result.x - gravity[0]) + (result.y - gravity[1]) * (result.y - gravity[1]) + (result.z - gravity[2]) * (result.z - gravity[2]));
//              frame_feature.push((result.x - gravity[0]) / magnitude);
//              frame_feature.push((result.y - gravity[1]) / magnitude);
//              frame_feature.push((result.z - gravity[2]) / magnitude);
//              $scope.collection_features.push(frame_feature);
//              $scope.collection_feature_magnitudes.push(magnitude);
//
//          }, function(err) {
//            // An error occurred. Show a message to the user
//
//          });
//        }, 25);
//    };
//
//    // Stop Collection
//    $scope.stopCollection = function() {
//        if (angular.isDefined(stop)) {
//          $interval.cancel(stop);
//          stop = undefined;
//          $scope.change_mode = true;
//          $scope.isCollecting = false;
//          $scope.recording_message = "";
//        }
//    };
//
//    $scope.emitLeft = function() {
//        $scope.socket.emit('Rhythm', {state: 'Left', name: my_name});
//    };
//
//    $scope.emitRight = function() {
//        $scope.socket.emit('Rhythm', {state: 'Right', name: my_name});
//    };
//
//    $scope.goHome = function() {
//       $scope.stopCollection();
//       $state.go('home');
//    };
//
//    $scope.onExit = function() {
//      $scope.socket.emit('Disconnect', my_name);
//    };
//
//    $window.onbeforeunload =  $scope.onExit;
//
//})
//
//.controller('endCtrl', function($scope) {
//    console.log('endCtrl');
//
//})
//
//.controller('trainCtrl', function($scope, $interval, $cordovaDeviceMotion, $localstorage, $analyzer, $cordovaMedia, $state) {
//    console.log('trainCtrl');
//    $scope.guide_message = "Training을 시작해 주세요.";
//
//    // Sound Play test
//
//
//
//    $scope.left_button_activate = true;
//    $scope.right_button_activate = true;
//
//    if(Object.keys($localstorage.getLeftTemplate()).length == 0)
//        $scope.left_status = false;
//    else
//        $scope.left_status = true;
//
//    // right template
//    if(Object.keys($localstorage.getRightTemplate()).length == 0)
//        $scope.right_status = false;
//    else
//        $scope.right_status = true;
//
//    $scope.testing = false;
//
//    $scope.leftTrain = function() {
//        console.log('start to train a left gesture');
//        if (stop === undefined) {
//            $scope.startCollection('Left');
//        }
//    };
//
//    $scope.rightTrain = function() {
//        console.log('start to train a right gesture');
//        if (stop === undefined) {
//            $scope.startCollection('Right');
//        }
//    };
//
//    var stop = undefined;
//
//    $scope.startCollection = function(gesture) {
//        $scope.stopCollection();
//        $scope.guide_message = "기다려주세요";
//
//        // Data set
//        var recorded_data = [
//            [], // For_X
//            [], // For_Y
//            [] // For_Z
//        ];
//        var magnitude_array = [];
//
//        // Status Variables
//        var isRecording = false;
//        var isStable = false;
//
//        // start collection...
//        var gravity = [0, 0, 0];
//        stop = $interval(function() {
//          // get accelerometer data
//          $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {
//
//              // remove gravity
//              var alpha = 0.8;
//
//              gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
//              gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
//              gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;
//
//              var x = result.x - gravity[0];
//              var y = result.y - gravity[1];
//              var z = result.z - gravity[2];
//              var magnitude = Math.sqrt(x * x + y * y + z * z);
//
//              // add magnitude value to magnitude array
//              magnitude_array.push(magnitude);
//
//              var avg = 10000;  // Quite Large AVG
//              if(magnitude_array.length > 5) { // 5는 magnitude average 의 크기
//                var sum = 0;
//                for(var i = 0; i < magnitude_array.length; i++)
//                    sum += magnitude_array[i];
//                avg = sum / magnitude_array.length;
//                magnitude_array.shift();
//              }
//
//              if(isRecording === false && isStable === false) { // before stable
//                if(avg < 0.5) { // stable
//                    isStable = true;
//                    $scope.guide_message = "제스처를 시작해주세요";
//                }
//              } else if(isRecording === false && isStable === true) { // After stable
//                if(avg > 1.5) { // moving
//                    isRecording = true;
//                    $scope.guide_message = "제스처 수집중";
//                }
//              } else if(isRecording === true && isStable === true) {  // During Recording
//                if(avg < 1 && recorded_data[0].length > 10) {
//                    $scope.stopCollection();
//                    $scope.guide_message = "제스처 수집 종료";
//                    if(gesture === 'Left') {
//                        var left_template = [];
//                        for(var j = 0; j < recorded_data[0].length; j++) {
//                            var left_feature = [];
//                            var left_magnitude = Math.sqrt(recorded_data[0][j] * recorded_data[0][j] + recorded_data[1][j] * recorded_data[1][j] + recorded_data[2][j] * recorded_data[2][j]);
//                            left_feature.push(recorded_data[0][j] / left_magnitude); // x
//                            left_feature.push(recorded_data[1][j] / left_magnitude); // y
//                            left_feature.push(recorded_data[2][j] / left_magnitude); // z
//                            left_template.push(left_feature);
//                        }
//                        $localstorage.setLeftTemplate({left:left_template});
//                        $scope.left_status = true;
//                    } else if(gesture === 'Right') {
//                        var right_template = [];
//                        for(var k = 0; k < recorded_data[0].length; k++) {
//                            var right_feature = [];
//                            var right_magnitude = Math.sqrt(recorded_data[0][k] * recorded_data[0][k] + recorded_data[1][k] * recorded_data[1][k] + recorded_data[2][k] * recorded_data[2][k]);
//                            right_feature.push(recorded_data[0][k] / right_magnitude); // x
//                            right_feature.push(recorded_data[1][k] / right_magnitude); // y
//                            right_feature.push(recorded_data[2][k] / right_magnitude); // z
//                            right_template.push(right_feature);
//                        }
//                        $localstorage.setRightTemplate({right:right_template});
//                        $scope.right_status = true;
//                    }
//                } else {
//                    recorded_data[0].push(x);
//                    recorded_data[1].push(y);
//                    recorded_data[2].push(z);
//                }
//              }
//
//          }, function(err) {
//            // An error occurred. Show a message to the user
//          });
//        }, 25);
//    };
//
//    $scope.startTest = function() {
//
//        if ( angular.isDefined(stop) ) return;
//        console.log('started to test gesture');
//
//        //
//        $scope.testing = true;
//        $scope.left_button_activate = false;
//        $scope.right_button_activate = false;
//
//        // initialize raw mode
//        $scope.collection_features = [];
//        $scope.collection_feature_magnitudes = [];
//        $scope.analysis_index = 0;
//
//        $scope.current_state = "Non";
//
//        // get templates from local storage
//
//        var left_template = $localstorage.getLeftTemplate()["left"];
//        var right_template = $localstorage.getRightTemplate()["right"];
//        console.log('Left Length : ' + left_template.length);
//        console.log('Right Length : ' + right_template.length);
//        var frame_size = Math.min(left_template.length, right_template.length); // 이거 어떻게 정해야하는지 고민되는 구만
//
//        $scope.left_distance = 0;
//        $scope.right_distance = 0;
//
//        // sound
//        //var background_src = "/audio/background.mp3";
//        //var background_media = $cordovaMedia.newMedia(background_src);
//        //background_media.play();
//
//        var left_src = "/audio/Left.mp3";
//        var left_media = $cordovaMedia.newMedia(left_src);
//        left_media.setVolume(0.5);
//
//        var right_src = "/audio/Right.mp3";
//        var right_media = $cordovaMedia.newMedia(right_src);
//        right_media.setVolume(0.5);
//
//        // start collecting
//        var gravity = [0, 0, 0];
//        stop = $interval(function() {
//          // get accelerometer data
//          $cordovaDeviceMotion.getCurrentAcceleration().then(function(result) {
//
//              $scope.analysis_index++;
//
//              // calculate similarity
//              if($scope.collection_features.length > frame_size) {
//                 $scope.collection_features.shift();
//                 $scope.collection_feature_magnitudes.shift();
//
//                 // calculate average magnitude
//                 var sum = 0;
//                 for(var i = $scope.collection_feature_magnitudes.length - 5; i < $scope.collection_feature_magnitudes.length; i++)
//                    sum += $scope.collection_feature_magnitudes[i];
//                 $scope.avg_magnitude = sum / $scope.collection_feature_magnitudes.length;
//
//                 if($scope.analysis_index % 2 == 0) {
//                     // 현재 Left 인지 Right 인지로 구분해서 하면 되겠구나
//                     if($scope.current_state !== 'Left') {
//                        // Right or None
//                        var left_distance = $analyzer.getSimilarity(left_template, $scope.collection_features);
//                        if(left_distance < 15) {
//                            console.log('Left Gesture');
//                            $scope.current_state = 'Left';
//                            $scope.guide_message = 'Left';
//                            $scope.left_distance = left_distance;
//                            // 소리 Play
//                            //background_media.pause();
//                            left_media.play();
//                            //setTimeout(function(){ left_media.stop(); background_media.play(); }, 1000);
//                        }
//                     } else if($scope.current_state !== 'Right') {
//                        var right_distance = $analyzer.getSimilarity(right_template, $scope.collection_features);
//                        if(right_distance < 15) {
//                            console.log('Right Gesture');
//                            $scope.current_state = 'Right';
//                            $scope.guide_message = 'Right';
//                            $scope.right_distance = right_distance;
//                            // 소리 Play
//                            //background_media.pause();
//                            right_media.play();
//                            //setTimeout(function(){ right_media.stop(); background_media.play(); }, 1000);
//                        }
//                     }
//                 }
//              }
//
//              // remove gravity
//              var alpha = 0.8;
//              gravity[0] = alpha * gravity[0] + (1 - alpha) * result.x;
//              gravity[1] = alpha * gravity[1] + (1 - alpha) * result.y;
//              gravity[2] = alpha * gravity[2] + (1 - alpha) * result.z;
//
//              // normalize and make collection_features
//              var frame_feature = [];
//              var magnitude = Math.sqrt((result.x - gravity[0]) * (result.x - gravity[0]) + (result.y - gravity[1]) * (result.y - gravity[1]) + (result.z - gravity[2]) * (result.z - gravity[2]));
//              frame_feature.push((result.x - gravity[0]) / magnitude);
//              frame_feature.push((result.y - gravity[1]) / magnitude);
//              frame_feature.push((result.z - gravity[2]) / magnitude);
//              $scope.collection_features.push(frame_feature);
//              $scope.collection_feature_magnitudes.push(magnitude);
//
//          }, function(err) {
//            // An error occurred. Show a message to the user
//
//          });
//        }, 25);
//
//    };
//
//    $scope.stopCollection = function() {
//
//        if (angular.isDefined(stop)) {
//          $interval.cancel(stop);
//          stop = undefined;
//          $scope.testing = false;
//          $scope.left_button_activate = true;
//          $scope.right_button_activate = true;
//        }
//
//    };
//
//    $scope.imready = function() {
//        console.log("I'm Ready");
//        $state.go('login');
//    };
//
//})
//
//.controller('soundCtrl', function($scope, $cordovaNativeAudio, $timeout) {
//
//    $cordovaNativeAudio
//    .preloadComplex('music', '/audio/ambient.mp3',1,1)
//    .then(function (msg) {
//      console.log(msg);
//    }, function (error) {
//      console.error(error);
//    });
//
//    $scope.startBackground = function () {
//        console.log('start background music');
//        $cordovaNativeAudio.loop('music');
//    };
//
//    $scope.stopBackground = function () {
//        console.log('stop background music');
//        $cordovaNativeAudio.stop('music');
//        $cordovaNativeAudio.stop('effect');
//    };
//
//    $cordovaNativeAudio
//    .preloadSimple('effect', '/audio/snare.mp3')
//    .then(function (msg) {
//      console.log(msg);
//    }, function (error) {
//      console.error(error);
//    });
//
//    $scope.startEffect = function() {
//        console.log('start effect sound');
//        $cordovaNativeAudio.play('effect', new function(msg) {console.log(msg)});
//    };
//
//});



